#!/bin/bash

# Pre-commit hook: Enforce submodule-first push order
# SUBMODULE-ENFORCEMENT-2025-A: Pre-commit validation system

set -e

echo "üîç Checking submodule push status..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track if any submodules need pushing
UNPUSHED_SUBMODULES=()
SUBMODULE_CHANGES=false

# Check if we're in a git repo
if ! git rev-parse --git-dir > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Not in a git repository${NC}"
    exit 1
fi

# Function to check if submodule has unpushed commits
check_submodule_push_status() {
    local submodule_path="$1"
    local submodule_name=$(basename "$submodule_path")
    
    if [ ! -d "$submodule_path" ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Submodule directory not found: $submodule_path${NC}"
        return 0
    fi
    
    cd "$submodule_path"
    
    # Check if submodule has a remote
    if ! git remote | grep -q origin; then
        echo -e "${YELLOW}‚ö†Ô∏è  No remote 'origin' found for submodule: $submodule_name${NC}"
        cd - > /dev/null
        return 0
    fi
    
    # Get current branch
    local current_branch=$(git symbolic-ref --short HEAD 2>/dev/null || echo "HEAD")
    
    # Check if current branch exists on remote
    if ! git ls-remote --heads origin "$current_branch" | grep -q "$current_branch"; then
        echo -e "${YELLOW}‚ö†Ô∏è  Branch '$current_branch' doesn't exist on remote for $submodule_name${NC}"
        echo -e "${BLUE}üí° Tip: Push the branch first: cd $submodule_path && git push -u origin $current_branch${NC}"
        UNPUSHED_SUBMODULES+=("$submodule_name")
        cd - > /dev/null
        return 1
    fi
    
    # Fetch latest to ensure we have up-to-date remote info
    git fetch origin "$current_branch" 2>/dev/null || true
    
    # Check for unpushed commits
    local unpushed_count=$(git rev-list --count "origin/$current_branch..HEAD" 2>/dev/null || echo "0")
    
    if [ "$unpushed_count" -gt 0 ]; then
        echo -e "${RED}‚ùå Submodule '$submodule_name' has $unpushed_count unpushed commit(s)${NC}"
        echo -e "${BLUE}üí° Push first: cd $submodule_path && git push${NC}"
        UNPUSHED_SUBMODULES+=("$submodule_name")
        cd - > /dev/null
        return 1
    else
        echo -e "${GREEN}‚úÖ Submodule '$submodule_name' is up to date${NC}"
        cd - > /dev/null
        return 0
    fi
}

# Check if there are staged submodule changes
if git diff --cached --name-only | grep -E '^(backend|frontend)$' > /dev/null; then
    SUBMODULE_CHANGES=true
    echo -e "${BLUE}üì¶ Detected submodule changes in commit${NC}"
fi

# If no submodule changes, allow commit
if [ "$SUBMODULE_CHANGES" = false ]; then
    echo -e "${GREEN}‚úÖ No submodule changes detected, commit allowed${NC}"
    exit 0
fi

# Check each submodule
echo -e "${BLUE}üîç Checking submodule push status...${NC}"

# Get list of submodules from .gitmodules
if [ -f .gitmodules ]; then
    while IFS= read -r line; do
        if [[ $line =~ ^\[submodule[[:space:]]+\"(.+)\"\] ]]; then
            submodule_name="${BASH_REMATCH[1]}"
        elif [[ $line =~ ^[[:space:]]*path[[:space:]]*=[[:space:]]*(.+) ]]; then
            submodule_path="${BASH_REMATCH[1]// /}"
            if [ -n "$submodule_path" ]; then
                check_submodule_push_status "$submodule_path" || true
            fi
        fi
    done < .gitmodules
else
    # Fallback: check common submodule directories
    for submodule in backend frontend; do
        if [ -d "$submodule" ] && [ -f "$submodule/.git" ]; then
            check_submodule_push_status "$submodule" || true
        fi
    done
fi

# If there are unpushed submodules, block the commit
if [ ${#UNPUSHED_SUBMODULES[@]} -gt 0 ]; then
    echo
    echo -e "${RED}üö´ COMMIT BLOCKED: Unpushed submodules detected!${NC}"
    echo
    echo -e "${YELLOW}üìã Submodules requiring push:${NC}"
    for submodule in "${UNPUSHED_SUBMODULES[@]}"; do
        echo -e "   ‚Ä¢ ${RED}$submodule${NC}"
    done
    echo
    echo -e "${BLUE}üîß Required workflow:${NC}"
    echo -e "   1. Push submodules first:"
    for submodule in "${UNPUSHED_SUBMODULES[@]}"; do
        echo -e "      ${YELLOW}cd $submodule && git push${NC}"
    done
    echo -e "   2. Then commit/push root repo:"
    echo -e "      ${YELLOW}git commit && git push${NC}"
    echo
    echo -e "${BLUE}üí° Or use the smart push script: ${YELLOW}./scripts/smart-push.sh${NC}"
    echo
    exit 1
fi

echo -e "${GREEN}‚úÖ All submodules are pushed, commit allowed!${NC}"
exit 0