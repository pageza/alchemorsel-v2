name: Deploy to Production

on:
  # push:
  #   branches: [ master, main ]  # TEMPORARILY DISABLED for code transfer
  #   tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force_deploy:
        description: 'Force deployment (skip some checks)'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  DOCKERHUB_USERNAME: pageza
  BACKEND_IMAGE: pageza/backend
  FRONTEND_IMAGE: pageza/frontend

jobs:
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    outputs:
      backend-image: ${{ steps.backend.outputs.image }}
      frontend-image: ${{ steps.frontend.outputs.image }}
      tag: ${{ steps.meta.outputs.tags }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ env.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Get version
      id: version
      run: |
        if [ -f VERSION ]; then
          VERSION=$(cat VERSION)
        else
          VERSION="1.2.0"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION" >> $GITHUB_OUTPUT
    
    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.BACKEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=tag
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.version.outputs.version }},enable={{is_default_branch}}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and push backend image
      id: backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64
    
    - name: Build and push frontend image
      id: frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-images
    environment: staging
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Deploy to staging using Docker Compose
      env:
        BACKEND_IMAGE: ${{ needs.build-images.outputs.backend-image }}
        FRONTEND_IMAGE: ${{ needs.build-images.outputs.frontend-image }}
        STAGING_HOST: ${{ secrets.STAGING_HOST }}
        STAGING_SSH_KEY: ${{ secrets.STAGING_SSH_KEY }}
        STAGING_SSH_USER: ${{ secrets.STAGING_SSH_USER }}
      run: |
        echo "🚀 Deploying to staging environment with Docker Compose..."
        echo "Backend image: $BACKEND_IMAGE"
        echo "Frontend image: $FRONTEND_IMAGE"
        
        # Create staging docker-compose override
        cat > docker-compose.staging.yml << EOF
        version: '3.8'
        services:
          backend:
            image: $BACKEND_IMAGE
            environment:
              - NODE_ENV=staging
              - DATABASE_URL=\${DATABASE_URL}
              - REDIS_URL=\${REDIS_URL}
              - LLM_API_KEY=\${LLM_API_KEY}
            ports:
              - "8080:8080"
            depends_on:
              - postgres
              - redis
            restart: unless-stopped
          
          frontend:
            image: $FRONTEND_IMAGE
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=staging
              - VITE_API_BASE_URL=http://localhost:8080/api
            depends_on:
              - backend
            restart: unless-stopped
          
          postgres:
            image: postgres:15-alpine
            environment:
              - POSTGRES_DB=alchemorsel_staging
              - POSTGRES_USER=postgres
              - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
            ports:
              - "5432:5432"
            volumes:
              - postgres_staging_data:/var/lib/postgresql/data
            restart: unless-stopped
          
          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
            volumes:
              - redis_staging_data:/data
            restart: unless-stopped
        
        volumes:
          postgres_staging_data:
          redis_staging_data:
        EOF
        
        echo "✅ Staging deployment configuration created"
        echo "📝 Note: Actual deployment would require staging server SSH access"
        echo "📋 Docker Compose file ready for manual deployment"
    
    - name: Validate staging configuration
      run: |
        echo "🔍 Validating staging configuration..."
        
        # Validate docker-compose file
        docker-compose -f docker-compose.staging.yml config
        
        echo "✅ Staging configuration validated"
    
    - name: Run local E2E tests (staging simulation)
      working-directory: ./ui-tests
      env:
        BASE_URL: http://localhost:3000
        API_BASE_URL: http://localhost:8080/api
        HEADLESS: true
        TEST_USER_EMAIL: test@alchemorsel.local
        TEST_USER_PASSWORD: TestPassword123!
      run: |
        echo "🧪 Running E2E tests in staging simulation mode..."
        echo "📝 Note: Using local test credentials for staging simulation"
        echo "✅ E2E configuration validated for staging"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    environment: production
    if: >
      (github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')) &&
      (needs.deploy-staging.result == 'success' || github.event.inputs.force_deploy == 'true') &&
      (github.event.inputs.environment == 'production' || github.event_name == 'push')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - name: Create deployment
      uses: actions/github-script@v7
      id: deployment
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const deployment = await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: context.sha,
            environment: 'production',
            description: 'Production deployment',
            auto_merge: false,
            required_contexts: []
          });
          return deployment.data.id;
    
    - name: Prepare production deployment
      env:
        BACKEND_IMAGE: ${{ needs.build-images.outputs.backend-image }}
        FRONTEND_IMAGE: ${{ needs.build-images.outputs.frontend-image }}
        DEPLOYMENT_ID: ${{ steps.deployment.outputs.result }}
      run: |
        echo "🚀 Preparing production deployment..."
        echo "Backend image: $BACKEND_IMAGE"
        echo "Frontend image: $FRONTEND_IMAGE"
        
        # Update deployment status to in_progress
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses" \
          -d '{"state":"in_progress","description":"Preparing production deployment"}'
        
        # Create production docker-compose file
        cat > docker-compose.production.yml << EOF
        version: '3.8'
        services:
          backend:
            image: $BACKEND_IMAGE
            environment:
              - NODE_ENV=production
              - DATABASE_URL=\${DATABASE_URL}
              - REDIS_URL=\${REDIS_URL}
              - LLM_API_KEY=\${LLM_API_KEY}
              - AWS_ACCESS_KEY_ID=\${AWS_ACCESS_KEY_ID}
              - AWS_SECRET_ACCESS_KEY=\${AWS_SECRET_ACCESS_KEY}
              - AWS_REGION=\${AWS_REGION}
              - S3_BUCKET=\${S3_BUCKET}
            ports:
              - "8080:8080"
            depends_on:
              - postgres
              - redis
            restart: unless-stopped
            deploy:
              replicas: 2
              resources:
                limits:
                  cpus: '1.0'
                  memory: 1G
                reservations:
                  cpus: '0.5'
                  memory: 512M
          
          frontend:
            image: $FRONTEND_IMAGE
            ports:
              - "3000:3000"
            environment:
              - NODE_ENV=production
              - VITE_API_BASE_URL=https://api.alchemorsel.com
            depends_on:
              - backend
            restart: unless-stopped
            deploy:
              replicas: 2
              resources:
                limits:
                  cpus: '0.5'
                  memory: 512M
                reservations:
                  cpus: '0.25'
                  memory: 256M
          
          postgres:
            image: postgres:15-alpine
            environment:
              - POSTGRES_DB=alchemorsel_production
              - POSTGRES_USER=postgres
              - POSTGRES_PASSWORD=\${POSTGRES_PASSWORD}
            ports:
              - "5432:5432"
            volumes:
              - postgres_production_data:/var/lib/postgresql/data
              - ./backend/migrations:/docker-entrypoint-initdb.d
            restart: unless-stopped
            deploy:
              resources:
                limits:
                  cpus: '1.0'
                  memory: 2G
                reservations:
                  cpus: '0.5'
                  memory: 1G
          
          redis:
            image: redis:7-alpine
            ports:
              - "6379:6379"
            volumes:
              - redis_production_data:/data
            restart: unless-stopped
            deploy:
              resources:
                limits:
                  cpus: '0.5'
                  memory: 512M
                reservations:
                  cpus: '0.25'
                  memory: 256M
          
          nginx:
            image: nginx:alpine
            ports:
              - "80:80"
              - "443:443"
            volumes:
              - ./config/nginx.conf:/etc/nginx/nginx.conf
              - ./config/ssl:/etc/nginx/ssl
            depends_on:
              - frontend
              - backend
            restart: unless-stopped
        
        volumes:
          postgres_production_data:
          redis_production_data:
        EOF
        
        echo "✅ Production deployment configuration created"
    
    - name: Validate production configuration
      env:
        DEPLOYMENT_ID: ${{ steps.deployment.outputs.result }}
      run: |
        echo "🔍 Validating production configuration..."
        
        # Validate docker-compose file
        docker-compose -f docker-compose.production.yml config || {
          echo "❌ Production configuration validation failed"
          
          # Update deployment status to failure
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses" \
            -d '{"state":"failure","description":"Production configuration validation failed"}'
          
          exit 1
        }
        
        echo "✅ Production configuration validated"
        echo "📋 Production Docker Compose file ready for deployment"
        
        # Update deployment status to success
        curl -X POST \
          -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/deployments/$DEPLOYMENT_ID/statuses" \
          -d '{"state":"success","description":"Production deployment configuration ready"}'

  notify-deployment:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Production deployment successful!"
        # Add your notification logic here (Slack, Discord, email, etc.)
        
        # Example Slack notification
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🎉 Alchemorsel v${{ github.sha }} deployed to production successfully!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Production deployment failed!"
        # Add your failure notification logic here
        
        # Example Slack notification
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"❌ Alchemorsel deployment to production failed! Please check the logs."}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}