name: Quality Gates Pipeline

# Purpose: Comprehensive quality gates for production readiness
# - Coverage thresholds and quality metrics
# - Security vulnerability scanning
# - Code quality analysis (SonarCloud)
# - Runs on PRs to main/master for production quality assurance
# - Basic tests handled by fast-ci.yml

on:
  pull_request:
    branches: [ main, master ]
  # push:
  #   branches: [ main, master ]  # TEMPORARILY DISABLED for code transfer

env:
  GO_VERSION: '1.24'
  NODE_VERSION: '20.x'

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Quality Gates - Must pass before any other jobs
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Needed for SonarCloud

    - name: Check commit messages
      run: |
        # Ensure commit messages follow conventional commits
        # Determine the default branch
        DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
        git log --oneline "origin/${DEFAULT_BRANCH}"..HEAD | while read commit; do
          if ! echo "$commit" | grep -qE "^[a-f0-9]+ (feat|fix|docs|style|refactor|test|chore)(\(.+\))?: .+"; then
            echo "‚ùå Invalid commit message format: $commit"
            echo "Expected: type(scope): description"
            echo "Examples: feat(auth): add login validation"
            echo "          fix(api): resolve race condition"
            exit 1
          fi
        done
        echo "‚úÖ All commit messages follow conventional format"

    - name: Check version consistency
      run: |
        chmod +x ./scripts/check-versions.sh
        ./scripts/check-versions.sh

    - name: Detect secrets
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event_name == 'push' && github.event.before != '0000000000000000000000000000000000000000' && github.event.before || '' }}
        head: ${{ github.event_name == 'push' && 'HEAD' || github.head_ref }}

  # Backend Quality Analysis (coverage, security, vulnerabilities)
  backend-quality-analysis:
    name: Backend Quality Analysis
    runs-on: ubuntu-latest
    needs: quality-gates
    
    services:
      postgres:
        image: pgvector/pgvector:pg16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: alchemorsel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: Install dependencies
      working-directory: ./backend
      run: |
        go mod download
        go mod verify

    - name: Go vulnerability check
      working-directory: ./backend
      run: |
        echo "üîç Scanning for known vulnerabilities..."
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...

    - name: Go strict linting
      working-directory: ./backend
      run: |
        echo "üîß Running strict Go linting with zero tolerance..."
        go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
        golangci-lint run --timeout=5m  # Fail on any linting issues

    - name: Go tests with strict coverage requirements
      working-directory: ./backend
      env:
        DB_HOST: localhost
        DB_PORT: 5432
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: alchemorsel_test
        DB_SSL_MODE: disable
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        JWT_SECRET: test-jwt-secret
        SERVER_PORT: 8080
        SERVER_HOST: localhost
      run: |
        echo "üìä Running tests with coverage analysis..."
        go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        
        # Enforce strict 80% coverage threshold
        COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
        echo "Current coverage: $COVERAGE%"
        if (( $(echo "$COVERAGE < 80" | bc -l) )); then
          echo "‚ùå Coverage $COVERAGE% is below required 80% threshold"
          echo "üéØ Quality gate: Coverage must be ‚â•80% for production readiness"
          exit 1
        fi
        echo "‚úÖ Coverage quality gate passed: $COVERAGE% ‚â• 80%"

    - name: Upload coverage for SonarCloud
      uses: actions/upload-artifact@v4
      with:
        name: backend-coverage
        path: ./backend/coverage.out
        retention-days: 1

    - name: Go security analysis
      working-directory: ./backend
      run: |
        echo "üõ°Ô∏è Running comprehensive security analysis..."
        go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
        gosec -fmt json -out gosec-report.json ./...
        
        # Check if any high/medium security issues found
        if [ -f gosec-report.json ]; then
          HIGH_ISSUES=$(jq '[.Issues[] | select(.Severity == "HIGH")] | length' gosec-report.json 2>/dev/null || echo "0")
          MEDIUM_ISSUES=$(jq '[.Issues[] | select(.Severity == "MEDIUM")] | length' gosec-report.json 2>/dev/null || echo "0")
          
          if [ "$HIGH_ISSUES" -gt 0 ] || [ "$MEDIUM_ISSUES" -gt 0 ]; then
            echo "‚ùå Security issues found: $HIGH_ISSUES high, $MEDIUM_ISSUES medium"
            echo "üõ°Ô∏è Quality gate: No high/medium security issues allowed"
            exit 1
          fi
          echo "‚úÖ Security quality gate passed: No high/medium issues found"
        fi

    # Coverage tracked locally - Codecov removed per user preference

  # Frontend Quality Analysis (coverage, security, bundle size)  
  frontend-quality-analysis:
    name: Frontend Quality Analysis
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Security audit
      working-directory: ./frontend
      run: |
        echo "üîç Scanning dependencies for security vulnerabilities..."
        npm audit --audit-level=moderate
        echo "üì¶ Checking for outdated packages..."
        npm outdated || true

    - name: TypeScript strict validation
      working-directory: ./frontend
      run: |
        echo "üîß Running strict TypeScript validation..."
        npm run type-check

    - name: ESLint strict enforcement
      working-directory: ./frontend
      run: |
        echo "üîß Running strict ESLint with zero tolerance..."
        npm run lint  # Must pass completely - no continue-on-error

    - name: Code formatting validation
      working-directory: ./frontend
      run: |
        echo "‚ú® Validating code formatting consistency..."
        npx prettier --check "src/**/*.{ts,tsx,vue,js,jsx}"

    - name: Frontend tests with strict coverage requirements
      working-directory: ./frontend
      run: |
        echo "üìä Running tests with strict coverage requirements..."
        npm run test:unit -- --coverage --coverage.threshold.global.lines=80 --coverage.threshold.global.functions=80 --coverage.threshold.global.branches=80 --coverage.threshold.global.statements=80
        echo "‚úÖ Coverage quality gate passed: All metrics ‚â• 80%"
        
    - name: Upload coverage for SonarCloud
      uses: actions/upload-artifact@v4
      with:
        name: frontend-coverage
        path: ./frontend/coverage/
        retention-days: 1
        
    - name: Production build validation
      working-directory: ./frontend
      run: |
        echo "üèóÔ∏è Validating production build..."
        npm run build

    - name: Bundle size quality gate
      working-directory: ./frontend
      run: |
        echo "üì¶ Enforcing bundle size limits for performance..."
        BUNDLE_SIZE=$(du -sb dist/ | cut -f1)
        MAX_SIZE=2097152  # 2MB in bytes
        BUNDLE_SIZE_MB=$(($BUNDLE_SIZE / 1024 / 1024))
        
        if [ $BUNDLE_SIZE -gt $MAX_SIZE ]; then
          echo "‚ùå Bundle size ${BUNDLE_SIZE_MB}MB exceeds 2MB performance limit"
          echo "üéØ Quality gate: Bundle must be ‚â§2MB for optimal loading performance"
          exit 1
        fi
        echo "‚úÖ Bundle size quality gate passed: ${BUNDLE_SIZE_MB}MB ‚â§ 2MB"

    # Coverage tracked locally - Codecov removed per user preference

  # SonarCloud Analysis
  sonarcloud:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    needs: [backend-quality-analysis, frontend-quality-analysis]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Download backend coverage
      uses: actions/download-artifact@v4
      with:
        name: backend-coverage
        path: ./backend/

    - name: Download frontend coverage
      uses: actions/download-artifact@v4
      with:
        name: frontend-coverage
        path: ./frontend/coverage/

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Security Scans
  security-scans:
    name: Security Scans
    runs-on: ubuntu-latest
    needs: quality-gates

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

    - name: Docker security scan
      run: |
        docker run --rm -v "$PWD":/workdir -w /workdir \
          hadolint/hadolint:latest hadolint backend/Dockerfile frontend/Dockerfile

  # Note: Integration tests handled by fast-ci.yml through E2E testing
  # This keeps quality gates focused on static analysis and quality metrics

  # Final Quality Gate
  quality-gate-final:
    name: Final Quality Gate
    runs-on: ubuntu-latest
    needs: [backend-quality-analysis, frontend-quality-analysis, sonarcloud, security-scans]
    if: always()

    steps:
    - name: Check all jobs passed
      run: |
        if [[ "${{ needs.backend-quality-analysis.result }}" != "success" ]]; then
          echo "‚ùå Backend quality analysis failed"
          exit 1
        fi
        if [[ "${{ needs.frontend-quality-analysis.result }}" != "success" ]]; then
          echo "‚ùå Frontend quality analysis failed"
          exit 1
        fi
        if [[ "${{ needs.sonarcloud.result }}" != "success" ]]; then
          echo "‚ùå SonarCloud analysis failed"
          exit 1
        fi
        if [[ "${{ needs.security-scans.result }}" != "success" ]]; then
          echo "‚ùå Security scans failed"
          exit 1
        fi
        echo "‚úÖ All quality gates passed!"

    - name: Update PR status
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.repos.createCommitStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            sha: context.sha,
            state: 'success',
            target_url: `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
            description: 'All quality gates passed',
            context: 'strict-ci/quality-gates'
          });