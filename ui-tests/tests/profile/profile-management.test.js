const { test, describe, beforeEach, afterEach } = require('node:test');\nconst assert = require('node:assert');\nrequire('dotenv').config();\n\nconst BrowserManager = require('../../helpers/browser');\nconst AuthHelper = require('../../helpers/auth');\nconst { generators } = require('../../helpers/fixtures');\n\ndescribe('User Profile Management', () => {\n  let browser;\n  let auth;\n\n  beforeEach(async () => {\n    browser = new BrowserManager();\n    await browser.launch();\n    auth = new AuthHelper(browser);\n    \n    // Login before each test as profile management requires authentication\n    await auth.loginAsTestUser();\n  });\n\n  afterEach(async () => {\n    if (browser) {\n      await browser.close();\n    }\n  });\n\n  test('should display user profile page correctly', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Verify profile page elements are present\n      assert.ok(await browser.elementExists('[data-testid=\"profile-form\"]'), 'Profile form should be visible');\n      \n      // Check for basic profile fields\n      const basicFields = [\n        '[data-testid=\"email-input\"]',\n        '[data-testid=\"username-input\"]',\n        '[data-testid=\"first-name-input\"]',\n        '[data-testid=\"last-name-input\"]'\n      ];\n      \n      for (const field of basicFields) {\n        const fieldExists = await browser.elementExists(field);\n        if (fieldExists) {\n          assert.ok(true, `Profile field ${field} should be present`);\n        }\n      }\n      \n      // Check for save button\n      assert.ok(await browser.elementExists('[data-testid=\"save-profile\"]'), 'Save button should be present');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-display', error);\n    }\n  });\n\n  test('should load current user profile data', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Get current user data\n      const currentUser = await auth.getCurrentUser();\n      \n      if (currentUser) {\n        // Check if email is pre-filled\n        if (await browser.elementExists('[data-testid=\"email-input\"]')) {\n          const emailValue = await browser.getPage().$eval(\n            '[data-testid=\"email-input\"]',\n            el => el.value\n          );\n          \n          if (emailValue) {\n            assert.strictEqual(emailValue, currentUser.email, 'Email should be pre-filled with current user data');\n          }\n        }\n        \n        // Check if username is pre-filled\n        if (await browser.elementExists('[data-testid=\"username-input\"]')) {\n          const usernameValue = await browser.getPage().$eval(\n            '[data-testid=\"username-input\"]',\n            el => el.value\n          );\n          \n          if (usernameValue) {\n            assert.strictEqual(usernameValue, currentUser.username, 'Username should be pre-filled with current user data');\n          }\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-data-load', error);\n    }\n  });\n\n  test('should update basic profile information', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Update profile fields\n      const updateData = {\n        firstName: 'Updated',\n        lastName: 'Name',\n        bio: 'This is my updated bio for E2E testing'\n      };\n      \n      // Fill in profile updates\n      if (await browser.elementExists('[data-testid=\"first-name-input\"]')) {\n        await browser.fillInput('[data-testid=\"first-name-input\"]', updateData.firstName);\n      }\n      \n      if (await browser.elementExists('[data-testid=\"last-name-input\"]')) {\n        await browser.fillInput('[data-testid=\"last-name-input\"]', updateData.lastName);\n      }\n      \n      if (await browser.elementExists('[data-testid=\"bio-input\"]')) {\n        await browser.fillInput('[data-testid=\"bio-input\"]', updateData.bio);\n      }\n      \n      // Save changes\n      await browser.clickElement('[data-testid=\"save-profile\"]');\n      \n      // Check for success message or redirect\n      const successIndicators = [\n        '[data-testid=\"success-message\"]',\n        '[data-testid=\"profile-saved\"]',\n        '[data-testid=\"update-success\"]'\n      ];\n      \n      let updateSuccess = false;\n      for (const selector of successIndicators) {\n        if (await browser.elementExists(selector, 5000)) {\n          updateSuccess = true;\n          break;\n        }\n      }\n      \n      if (updateSuccess) {\n        assert.ok(true, 'Profile update should show success message');\n      } else {\n        // Check if values are still in the form (indicating update was processed)\n        if (await browser.elementExists('[data-testid=\"first-name-input\"]')) {\n          const firstNameValue = await browser.getPage().$eval(\n            '[data-testid=\"first-name-input\"]',\n            el => el.value\n          );\n          assert.strictEqual(firstNameValue, updateData.firstName, 'Updated first name should persist');\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-update-basic', error);\n    }\n  });\n\n  test('should handle profile image upload', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Check for profile image upload functionality\n      const imageUploadExists = await browser.elementExists('[data-testid=\"profile-image-upload\"]') ||\n                               await browser.elementExists('[data-testid=\"avatar-upload\"]') ||\n                               await browser.elementExists('[data-testid=\"image-url\"]');\n      \n      if (!imageUploadExists) {\n        console.log('Profile image upload not found, skipping test');\n        return;\n      }\n      \n      if (await browser.elementExists('[data-testid=\"image-url\"]')) {\n        // Test URL input for profile image\n        const testImageUrl = 'https://example.com/test-avatar.jpg';\n        await browser.fillInput('[data-testid=\"image-url\"]', testImageUrl);\n        \n        const inputValue = await browser.getPage().$eval(\n          '[data-testid=\"image-url\"]',\n          el => el.value\n        );\n        assert.strictEqual(inputValue, testImageUrl, 'Profile image URL should be entered correctly');\n        \n      } else if (await browser.elementExists('[data-testid=\"profile-image-upload\"]') || \n                await browser.elementExists('[data-testid=\"avatar-upload\"]')) {\n        // Test file upload functionality\n        const uploadSelector = await browser.elementExists('[data-testid=\"profile-image-upload\"]') ?\n                              '[data-testid=\"profile-image-upload\"]' : '[data-testid=\"avatar-upload\"]';\n        \n        // Verify upload input is functional\n        const isFileInput = await browser.getPage().evaluate((selector) => {\n          const input = document.querySelector(selector);\n          return input && input.type === 'file';\n        }, uploadSelector);\n        \n        assert.ok(isFileInput, 'Profile image upload should be a file input');\n        \n        // Check for accepted file types\n        const acceptAttribute = await browser.getPage().evaluate((selector) => {\n          const input = document.querySelector(selector);\n          return input ? input.getAttribute('accept') : null;\n        }, uploadSelector);\n        \n        if (acceptAttribute) {\n          assert.ok(\n            acceptAttribute.includes('image') || acceptAttribute.includes('.jpg') || acceptAttribute.includes('.png'),\n            'Profile image upload should accept image file types'\n          );\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-image-upload', error);\n    }\n  });\n\n  test('should update dietary preferences', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Check for dietary preferences section\n      const dietaryPrefsExist = await browser.elementExists('[data-testid=\"dietary-preferences\"]') ||\n                               await browser.elementExists('[data-testid=\"dietary-section\"]');\n      \n      if (!dietaryPrefsExist) {\n        console.log('Dietary preferences section not found, skipping test');\n        return;\n      }\n      \n      // Test updating dietary preferences\n      const preferencesToSelect = ['vegetarian', 'gluten-free'];\n      \n      for (const preference of preferencesToSelect) {\n        const preferenceSelector = `[data-testid=\"dietary-${preference}\"]`;\n        if (await browser.elementExists(preferenceSelector)) {\n          // Get current state\n          const isCurrentlySelected = await browser.getPage().evaluate((selector) => {\n            const element = document.querySelector(selector);\n            return element && (element.checked || element.classList.contains('selected'));\n          }, preferenceSelector);\n          \n          // Toggle the preference\n          await browser.clickElement(preferenceSelector);\n          \n          // Verify state changed\n          const isNowSelected = await browser.getPage().evaluate((selector) => {\n            const element = document.querySelector(selector);\n            return element && (element.checked || element.classList.contains('selected'));\n          }, preferenceSelector);\n          \n          assert.notStrictEqual(\n            isCurrentlySelected,\n            isNowSelected,\n            `Dietary preference ${preference} should toggle state`\n          );\n        }\n      }\n      \n      // Save changes\n      await browser.clickElement('[data-testid=\"save-profile\"]');\n      \n      // Wait for save confirmation\n      await browser.elementExists('[data-testid=\"success-message\"]', 5000).catch(() => {\n        // Continue if no success message\n      });\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-dietary-preferences', error);\n    }\n  });\n\n  test('should update allergies information', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Check for allergies section\n      const allergiesExist = await browser.elementExists('[data-testid=\"allergies\"]') ||\n                           await browser.elementExists('[data-testid=\"allergy-section\"]');\n      \n      if (!allergiesExist) {\n        console.log('Allergies section not found, skipping test');\n        return;\n      }\n      \n      // Test updating allergies\n      const allergiesToSelect = ['nuts', 'dairy'];\n      \n      for (const allergy of allergiesToSelect) {\n        const allergySelector = `[data-testid=\"allergy-${allergy}\"]`;\n        if (await browser.elementExists(allergySelector)) {\n          // Get current state\n          const isCurrentlySelected = await browser.getPage().evaluate((selector) => {\n            const element = document.querySelector(selector);\n            return element && (element.checked || element.classList.contains('selected'));\n          }, allergySelector);\n          \n          // Toggle the allergy\n          await browser.clickElement(allergySelector);\n          \n          // Verify state changed\n          const isNowSelected = await browser.getPage().evaluate((selector) => {\n            const element = document.querySelector(selector);\n            return element && (element.checked || element.classList.contains('selected'));\n          }, allergySelector);\n          \n          assert.notStrictEqual(\n            isCurrentlySelected,\n            isNowSelected,\n            `Allergy ${allergy} should toggle state`\n          );\n        }\n      }\n      \n      // Save changes\n      await browser.clickElement('[data-testid=\"save-profile\"]');\n      \n      // Wait for save confirmation\n      await browser.elementExists('[data-testid=\"success-message\"]', 5000).catch(() => {\n        // Continue if no success message\n      });\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-allergies', error);\n    }\n  });\n\n  test('should change password', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Check for password change section\n      const passwordSectionExists = await browser.elementExists('[data-testid=\"password-section\"]') ||\n                                   await browser.elementExists('[data-testid=\"current-password\"]') ||\n                                   await browser.elementExists('[data-testid=\"change-password\"]');\n      \n      if (!passwordSectionExists) {\n        console.log('Password change section not found, skipping test');\n        return;\n      }\n      \n      // Fill password change form\n      const passwordData = {\n        current: process.env.TEST_USER_PASSWORD || 'TestPassword123!',\n        new: 'NewTestPassword123!',\n        confirm: 'NewTestPassword123!'\n      };\n      \n      if (await browser.elementExists('[data-testid=\"current-password\"]')) {\n        await browser.fillInput('[data-testid=\"current-password\"]', passwordData.current);\n      }\n      \n      if (await browser.elementExists('[data-testid=\"new-password\"]')) {\n        await browser.fillInput('[data-testid=\"new-password\"]', passwordData.new);\n      }\n      \n      if (await browser.elementExists('[data-testid=\"confirm-password\"]')) {\n        await browser.fillInput('[data-testid=\"confirm-password\"]', passwordData.confirm);\n      }\n      \n      // Submit password change\n      const changePasswordButton = await browser.elementExists('[data-testid=\"change-password\"]') ?\n                                  '[data-testid=\"change-password\"]' : '[data-testid=\"save-profile\"]';\n      \n      await browser.clickElement(changePasswordButton);\n      \n      // Check for success or error message\n      const passwordChangeResult = await browser.elementExists('[data-testid=\"password-success\"]', 5000) ||\n                                  await browser.elementExists('[data-testid=\"success-message\"]', 5000) ||\n                                  await browser.elementExists('[data-testid=\"password-error\"]', 5000);\n      \n      assert.ok(passwordChangeResult, 'Should show result message for password change attempt');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-password-change', error);\n    }\n  });\n\n  test('should validate profile form fields', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Test email validation\n      if (await browser.elementExists('[data-testid=\"email-input\"]')) {\n        await browser.fillInput('[data-testid=\"email-input\"]', 'invalid-email');\n        await browser.clickElement('[data-testid=\"save-profile\"]');\n        \n        const emailError = await browser.elementExists('[data-testid=\"email-error\"]', 3000);\n        if (emailError) {\n          assert.ok(true, 'Should show error for invalid email format');\n        }\n        \n        // Reset to valid email\n        await browser.fillInput('[data-testid=\"email-input\"]', 'test@example.com');\n      }\n      \n      // Test username validation\n      if (await browser.elementExists('[data-testid=\"username-input\"]')) {\n        await browser.fillInput('[data-testid=\"username-input\"]', 'a'); // Too short\n        await browser.clickElement('[data-testid=\"save-profile\"]');\n        \n        const usernameError = await browser.elementExists('[data-testid=\"username-error\"]', 3000);\n        if (usernameError) {\n          assert.ok(true, 'Should show error for invalid username');\n        }\n        \n        // Reset to valid username\n        await browser.fillInput('[data-testid=\"username-input\"]', 'validusername');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-validation', error);\n    }\n  });\n\n  test('should handle profile form cancellation', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Make some changes\n      if (await browser.elementExists('[data-testid=\"first-name-input\"]')) {\n        await browser.fillInput('[data-testid=\"first-name-input\"]', 'Changed Name');\n      }\n      \n      // Look for cancel button\n      const cancelButtonExists = await browser.elementExists('[data-testid=\"cancel\"]') ||\n                                await browser.elementExists('[data-testid=\"cancel-profile\"]');\n      \n      if (cancelButtonExists) {\n        const cancelSelector = await browser.elementExists('[data-testid=\"cancel\"]') ?\n                              '[data-testid=\"cancel\"]' : '[data-testid=\"cancel-profile\"]';\n        \n        await Promise.all([\n          browser.waitForNavigation(),\n          browser.clickElement(cancelSelector)\n        ]);\n        \n        // Verify we're redirected away from edit page\n        const currentUrl = browser.getCurrentUrl();\n        assert.ok(\n          !currentUrl.includes('/edit'),\n          'Should navigate away from edit page when canceled'\n        );\n      } else {\n        // Try browser back button as alternative\n        await browser.getPage().goBack({ waitUntil: 'networkidle0' });\n        \n        const currentUrl = browser.getCurrentUrl();\n        assert.ok(\n          !currentUrl.includes('/edit'),\n          'Browser back should work as cancel alternative'\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-cancel', error);\n    }\n  });\n\n  test('should handle network errors during profile update', async () => {\n    try {\n      await browser.navigate('/profile/edit');\n      \n      // Make changes to profile\n      if (await browser.elementExists('[data-testid=\"first-name-input\"]')) {\n        await browser.fillInput('[data-testid=\"first-name-input\"]', 'Network Error Test');\n      }\n      \n      // Simulate network failure\n      await browser.getPage().setRequestInterception(true);\n      browser.getPage().on('request', (request) => {\n        if (request.url().includes('/api/v1/profile') && request.method() === 'PUT') {\n          request.abort();\n        } else {\n          request.continue();\n        }\n      });\n      \n      // Try to save profile\n      await browser.clickElement('[data-testid=\"save-profile\"]');\n      \n      // Check for error handling\n      const errorMessage = await browser.elementExists('[data-testid=\"error-message\"]', 10000) ||\n                          await browser.elementExists('[data-testid=\"profile-error\"]', 10000);\n      \n      if (errorMessage) {\n        const errorSelector = await browser.elementExists('[data-testid=\"error-message\"]') ?\n                             '[data-testid=\"error-message\"]' : '[data-testid=\"profile-error\"]';\n        \n        const errorText = await browser.getElementText(errorSelector);\n        assert.ok(\n          errorText.toLowerCase().includes('error') || \n          errorText.toLowerCase().includes('failed') ||\n          errorText.toLowerCase().includes('network'),\n          'Should show appropriate error message for network failure'\n        );\n      }\n      \n      // Restore normal request handling\n      await browser.getPage().setRequestInterception(false);\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-network-error', error);\n    }\n  });\n\n  test('should display user dashboard with profile information', async () => {\n    try {\n      await browser.navigate('/dashboard');\n      \n      // Verify dashboard loads\n      assert.ok(await browser.elementExists('[data-testid=\"dashboard\"]'), 'Dashboard should be displayed');\n      \n      // Check for user profile information display\n      const profileInfoExists = await browser.elementExists('[data-testid=\"user-profile-info\"]') ||\n                               await browser.elementExists('[data-testid=\"user-welcome\"]') ||\n                               await browser.elementExists('[data-testid=\"username-display\"]');\n      \n      if (profileInfoExists) {\n        assert.ok(true, 'User profile information should be displayed on dashboard');\n        \n        // Check for profile edit link\n        const editProfileLinkExists = await browser.elementExists('[data-testid=\"edit-profile-link\"]') ||\n                                     await browser.elementExists('[data-testid=\"profile-settings\"]');\n        \n        if (editProfileLinkExists) {\n          assert.ok(true, 'Edit profile link should be available from dashboard');\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-dashboard-display', error);\n    }\n  });\n\n  test('should be responsive on different screen sizes', async () => {\n    try {\n      // Test desktop view\n      await browser.getPage().setViewport({ width: 1920, height: 1080 });\n      await browser.navigate('/profile/edit');\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"profile-form\"]'),\n        'Profile form should display on desktop'\n      );\n      \n      // Test mobile view\n      await browser.getPage().setViewport({ width: 375, height: 667 });\n      await browser.getPage().reload({ waitUntil: 'networkidle0' });\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"profile-form\"]'),\n        'Profile form should display on mobile'\n      );\n      \n      // Test form interaction on mobile\n      if (await browser.elementExists('[data-testid=\"first-name-input\"]')) {\n        await browser.fillInput('[data-testid=\"first-name-input\"]', 'Mobile Test');\n        \n        const value = await browser.getPage().$eval(\n          '[data-testid=\"first-name-input\"]',\n          el => el.value\n        );\n        assert.strictEqual(value, 'Mobile Test', 'Profile form should work on mobile');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('profile-responsive', error);\n    }\n  });\n});