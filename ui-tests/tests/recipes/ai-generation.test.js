const { test, describe, beforeEach, afterEach } = require('node:test');\nconst assert = require('node:assert');\nrequire('dotenv').config();\n\nconst BrowserManager = require('../../helpers/browser');\nconst AuthHelper = require('../../helpers/auth');\nconst RecipeHelper = require('../../helpers/recipes');\nconst { aiPrompts } = require('../../helpers/fixtures');\n\ndescribe('AI Recipe Generation', () => {\n  let browser;\n  let auth;\n  let recipes;\n\n  beforeEach(async () => {\n    browser = new BrowserManager();\n    await browser.launch();\n    auth = new AuthHelper(browser);\n    recipes = new RecipeHelper(browser);\n    \n    // Login before each test as AI generation requires authentication\n    await auth.loginAsTestUser();\n  });\n\n  afterEach(async () => {\n    if (browser) {\n      await browser.close();\n    }\n  });\n\n  test('should display AI recipe generation page correctly', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // Verify AI generation page elements are present\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-generator\"]'), 'Recipe generator should be visible');\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-prompt\"]'), 'Recipe prompt input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"generate-button\"]'), 'Generate button should be present');\n      \n      // Check for helpful prompts or examples\n      const examplesExist = await browser.elementExists('[data-testid=\"prompt-examples\"]') ||\n                           await browser.elementExists('[data-testid=\"example-prompts\"]');\n      \n      if (examplesExist) {\n        assert.ok(true, 'Prompt examples should be available to guide users');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-display', error);\n    }\n  });\n\n  test('should generate recipe from simple prompt', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      const simplePrompt = aiPrompts.simple; // 'Create a quick 30-minute dinner recipe for chicken'\n      const generatedRecipe = await recipes.generateRecipeWithAI(simplePrompt);\n      \n      // Verify recipe was generated\n      assert.ok(generatedRecipe, 'AI should generate a recipe');\n      \n      // Check for generated recipe elements\n      assert.ok(await browser.elementExists('[data-testid=\"generated-recipe\"]'), 'Generated recipe should be displayed');\n      \n      // Verify recipe has basic required fields\n      if (generatedRecipe.title) {\n        assert.ok(generatedRecipe.title.length > 0, 'Generated recipe should have a title');\n      }\n      \n      if (generatedRecipe.ingredients) {\n        assert.ok(generatedRecipe.ingredients.length > 0, 'Generated recipe should have ingredients');\n      }\n      \n      if (generatedRecipe.instructions) {\n        assert.ok(generatedRecipe.instructions.length > 0, 'Generated recipe should have instructions');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-simple', error);\n    }\n  });\n\n  test('should generate recipe from complex prompt', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      const complexPrompt = aiPrompts.complex; // 'I want to make an impressive dessert for a dinner party with chocolate and berries'\n      const generatedRecipe = await recipes.generateRecipeWithAI(complexPrompt);\n      \n      // Verify recipe was generated\n      assert.ok(generatedRecipe, 'AI should generate a recipe from complex prompt');\n      \n      // Verify recipe addresses the prompt requirements\n      if (generatedRecipe.title) {\n        const titleLower = generatedRecipe.title.toLowerCase();\n        const hasChocolate = titleLower.includes('chocolate') || titleLower.includes('cocoa');\n        const hasBerries = titleLower.includes('berry') || titleLower.includes('strawberry') || \n                          titleLower.includes('raspberry') || titleLower.includes('blueberry');\n        const isDessert = titleLower.includes('dessert') || titleLower.includes('cake') || \n                         titleLower.includes('tart') || titleLower.includes('mousse');\n        \n        if (hasChocolate || hasBerries || isDessert) {\n          assert.ok(true, 'Generated recipe should relate to the prompt requirements');\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-complex', error);\n    }\n  });\n\n  test('should handle dietary restriction prompts', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      const dietaryPrompt = aiPrompts.dietary; // 'Make a vegan pasta dish that is also gluten-free and high in protein'\n      const generatedRecipe = await recipes.generateRecipeWithAI(dietaryPrompt);\n      \n      // Verify recipe was generated\n      assert.ok(generatedRecipe, 'AI should generate recipe with dietary restrictions');\n      \n      // Check if recipe addresses dietary requirements\n      if (generatedRecipe.ingredients && generatedRecipe.ingredients.length > 0) {\n        const ingredientsText = generatedRecipe.ingredients.join(' ').toLowerCase();\n        \n        // Check for vegan ingredients (no dairy, meat, eggs)\n        const hasNonVegan = ingredientsText.includes('cheese') || ingredientsText.includes('milk') ||\n                           ingredientsText.includes('butter') || ingredientsText.includes('egg') ||\n                           ingredientsText.includes('meat') || ingredientsText.includes('chicken');\n        \n        if (!hasNonVegan) {\n          assert.ok(true, 'Generated recipe should respect dietary restrictions');\n        }\n        \n        // Check for gluten-free pasta alternatives\n        const hasGlutenFreeAlternatives = ingredientsText.includes('rice pasta') || \n                                         ingredientsText.includes('quinoa') ||\n                                         ingredientsText.includes('gluten-free');\n        \n        if (hasGlutenFreeAlternatives) {\n          assert.ok(true, 'Generated recipe should include gluten-free alternatives');\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-dietary', error);\n    }\n  });\n\n  test('should modify generated recipe with additional prompt', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // First generate a basic recipe\n      const initialPrompt = aiPrompts.simple;\n      await recipes.generateRecipeWithAI(initialPrompt, { waitForGeneration: true });\n      \n      // Then modify it\n      const modificationPrompt = aiPrompts.modification; // 'Make this recipe dairy-free and add more vegetables'\n      await recipes.modifyGeneratedRecipe(modificationPrompt);\n      \n      // Verify modification was applied\n      const modifiedRecipe = await recipes.getGeneratedRecipeData();\n      \n      assert.ok(modifiedRecipe, 'Recipe should be modified');\n      \n      // Check if modifications were applied\n      if (modifiedRecipe.ingredients && modifiedRecipe.ingredients.length > 0) {\n        const ingredientsText = modifiedRecipe.ingredients.join(' ').toLowerCase();\n        \n        // Check for dairy-free modifications\n        const hasDairy = ingredientsText.includes('milk') || ingredientsText.includes('cheese') ||\n                        ingredientsText.includes('butter') || ingredientsText.includes('cream');\n        \n        const hasVegetables = ingredientsText.includes('vegetable') || ingredientsText.includes('carrot') ||\n                             ingredientsText.includes('broccoli') || ingredientsText.includes('spinach');\n        \n        if (!hasDairy || hasVegetables) {\n          assert.ok(true, 'Recipe modifications should be applied');\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-modification', error);\n    }\n  });\n\n  test('should save generated recipe', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // Generate a recipe\n      const prompt = aiPrompts.simple;\n      await recipes.generateRecipeWithAI(prompt, { waitForGeneration: true });\n      \n      // Save the generated recipe\n      const saveResult = await recipes.saveGeneratedRecipe();\n      \n      assert.ok(saveResult.success, 'Generated recipe should be saved successfully');\n      assert.ok(saveResult.recipeId || saveResult.url, 'Should return recipe ID or URL after saving');\n      \n      // Verify we're redirected to the saved recipe\n      const currentUrl = browser.getCurrentUrl();\n      assert.ok(\n        currentUrl.includes('/recipes/') && !currentUrl.includes('/generate'),\n        'Should redirect to saved recipe page'\n      );\n      \n      // Verify the recipe is displayed\n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-detail\"]'),\n        'Saved recipe should be displayed'\n      );\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-save', error);\n    }\n  });\n\n  test('should handle empty or invalid prompts', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // Test empty prompt\n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', '');\n      await browser.clickElement('[data-testid=\"generate-button\"]');\n      \n      // Check for validation error\n      const emptyPromptError = await browser.elementExists('[data-testid=\"prompt-error\"]', 3000) ||\n                              await browser.elementExists('[data-testid=\"validation-error\"]', 3000);\n      \n      if (emptyPromptError) {\n        assert.ok(true, 'Should show error for empty prompt');\n      }\n      \n      // Test very short prompt\n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', 'a');\n      await browser.clickElement('[data-testid=\"generate-button\"]');\n      \n      const shortPromptError = await browser.elementExists('[data-testid=\"prompt-error\"]', 3000);\n      if (shortPromptError) {\n        assert.ok(true, 'Should show error for very short prompt');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-invalid-prompts', error);\n    }\n  });\n\n  test('should display generation loading states', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      const prompt = aiPrompts.simple;\n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', prompt);\n      \n      // Click generate and immediately check for loading state\n      await browser.clickElement('[data-testid=\"generate-button\"]');\n      \n      // Check for loading indicators\n      const loadingExists = await browser.elementExists('[data-testid=\"generation-spinner\"]', 2000) ||\n                           await browser.elementExists('[data-testid=\"loading\"]', 2000) ||\n                           await browser.elementExists('[data-testid=\"generating\"]', 2000);\n      \n      if (loadingExists) {\n        assert.ok(true, 'Should show loading state during generation');\n        \n        // Wait for generation to complete\n        await browser.waitForElement('[data-testid=\"generated-recipe\"]', 30000);\n        \n        // Verify loading state is removed\n        const loadingStillExists = await browser.elementExists('[data-testid=\"generation-spinner\"]', 1000);\n        assert.ok(!loadingStillExists, 'Loading state should be removed after generation');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-loading', error);\n    }\n  });\n\n  test('should handle AI service errors gracefully', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // Simulate AI service error by intercepting requests\n      await browser.getPage().setRequestInterception(true);\n      browser.getPage().on('request', (request) => {\n        if (request.url().includes('/api/v1/llm/query')) {\n          request.respond({\n            status: 500,\n            contentType: 'application/json',\n            body: JSON.stringify({ error: 'AI service temporarily unavailable' })\n          });\n        } else {\n          request.continue();\n        }\n      });\n      \n      const prompt = aiPrompts.simple;\n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', prompt);\n      await browser.clickElement('[data-testid=\"generate-button\"]');\n      \n      // Check for error handling\n      const errorMessage = await browser.elementExists('[data-testid=\"error-message\"]', 10000) ||\n                          await browser.elementExists('[data-testid=\"generation-error\"]', 10000);\n      \n      if (errorMessage) {\n        const errorSelector = await browser.elementExists('[data-testid=\"error-message\"]') ?\n                             '[data-testid=\"error-message\"]' : '[data-testid=\"generation-error\"]';\n        \n        const errorText = await browser.getElementText(errorSelector);\n        assert.ok(\n          errorText.toLowerCase().includes('error') || \n          errorText.toLowerCase().includes('unavailable') ||\n          errorText.toLowerCase().includes('failed'),\n          'Should show appropriate error message for AI service failure'\n        );\n      }\n      \n      // Restore normal request handling\n      await browser.getPage().setRequestInterception(false);\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-service-error', error);\n    }\n  });\n\n  test('should handle long generation times with timeout', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // Simulate slow AI response\n      await browser.getPage().setRequestInterception(true);\n      browser.getPage().on('request', (request) => {\n        if (request.url().includes('/api/v1/llm/query')) {\n          // Delay response to simulate slow generation\n          setTimeout(() => {\n            request.continue();\n          }, 25000); // 25 second delay\n        } else {\n          request.continue();\n        }\n      });\n      \n      const prompt = aiPrompts.simple;\n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', prompt);\n      await browser.clickElement('[data-testid=\"generate-button\"]');\n      \n      // Check if timeout is handled appropriately\n      try {\n        await browser.waitForElement('[data-testid=\"generated-recipe\"]', 20000);\n        assert.ok(true, 'Recipe should generate within reasonable time');\n      } catch (timeoutError) {\n        // Check for timeout handling\n        const timeoutMessage = await browser.elementExists('[data-testid=\"timeout-error\"]', 2000) ||\n                              await browser.elementExists('[data-testid=\"error-message\"]', 2000);\n        \n        if (timeoutMessage) {\n          assert.ok(true, 'Should handle generation timeout gracefully');\n        }\n      }\n      \n      // Restore normal request handling\n      await browser.getPage().setRequestInterception(false);\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-timeout', error);\n    }\n  });\n\n  test('should handle prompt character limits', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      // Test very long prompt\n      const veryLongPrompt = 'Create a recipe for '.repeat(100) + 'chicken pasta';\n      \n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', veryLongPrompt);\n      \n      // Check if character limit is enforced\n      const actualValue = await browser.getPage().$eval(\n        '[data-testid=\"recipe-prompt\"]',\n        el => el.value\n      );\n      \n      if (actualValue.length < veryLongPrompt.length) {\n        assert.ok(true, 'Prompt input should have character limit');\n      }\n      \n      // Check for character counter if present\n      const characterCounter = await browser.elementExists('[data-testid=\"character-count\"]');\n      if (characterCounter) {\n        assert.ok(true, 'Character counter should be displayed');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-character-limits', error);\n    }\n  });\n\n  test('should handle regeneration of recipes', async () => {\n    try {\n      await recipes.goToGenerateRecipe();\n      \n      const prompt = aiPrompts.simple;\n      \n      // Generate first recipe\n      await recipes.generateRecipeWithAI(prompt, { waitForGeneration: true });\n      const firstRecipe = await recipes.getGeneratedRecipeData();\n      \n      // Check for regenerate button\n      const regenerateExists = await browser.elementExists('[data-testid=\"regenerate\"]') ||\n                              await browser.elementExists('[data-testid=\"generate-again\"]');\n      \n      if (regenerateExists) {\n        const regenerateSelector = await browser.elementExists('[data-testid=\"regenerate\"]') ?\n                                  '[data-testid=\"regenerate\"]' : '[data-testid=\"generate-again\"]';\n        \n        // Regenerate recipe\n        await browser.clickElement(regenerateSelector);\n        await browser.waitForElement('[data-testid=\"generated-recipe\"]', 30000);\n        \n        const secondRecipe = await recipes.getGeneratedRecipeData();\n        \n        // Verify we got a different recipe (titles should be different)\n        if (firstRecipe.title && secondRecipe.title) {\n          assert.notStrictEqual(\n            firstRecipe.title,\n            secondRecipe.title,\n            'Regenerated recipe should be different from the first'\n          );\n        }\n      } else {\n        console.log('Regenerate functionality not found');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-regenerate', error);\n    }\n  });\n\n  test('should be responsive on different screen sizes', async () => {\n    try {\n      // Test desktop view\n      await browser.getPage().setViewport({ width: 1920, height: 1080 });\n      await recipes.goToGenerateRecipe();\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-generator\"]'),\n        'AI generation should work on desktop'\n      );\n      \n      // Test mobile view\n      await browser.getPage().setViewport({ width: 375, height: 667 });\n      await browser.getPage().reload({ waitUntil: 'networkidle0' });\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-generator\"]'),\n        'AI generation should work on mobile'\n      );\n      \n      // Test generation on mobile\n      await browser.fillInput('[data-testid=\"recipe-prompt\"]', 'Quick mobile test recipe');\n      await browser.clickElement('[data-testid=\"generate-button\"]');\n      \n      // Check if generation process works on mobile\n      const mobileGeneration = await browser.elementExists('[data-testid=\"generated-recipe\"]', 30000) ||\n                              await browser.elementExists('[data-testid=\"generation-spinner\"]', 5000);\n      \n      assert.ok(mobileGeneration, 'AI generation should work on mobile devices');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('ai-generation-responsive', error);\n    }\n  });\n});