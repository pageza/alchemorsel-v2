const { test, describe, beforeEach, afterEach } = require('node:test');\nconst assert = require('node:assert');\nrequire('dotenv').config();\n\nconst BrowserManager = require('../../helpers/browser');\nconst AuthHelper = require('../../helpers/auth');\nconst RecipeHelper = require('../../helpers/recipes');\nconst { testRecipes, generators } = require('../../helpers/fixtures');\n\ndescribe('Recipe Creation and Management', () => {\n  let browser;\n  let auth;\n  let recipes;\n\n  beforeEach(async () => {\n    browser = new BrowserManager();\n    await browser.launch();\n    auth = new AuthHelper(browser);\n    recipes = new RecipeHelper(browser);\n    \n    // Login before each test as recipe creation requires authentication\n    await auth.loginAsTestUser();\n  });\n\n  afterEach(async () => {\n    if (browser) {\n      await browser.close();\n    }\n  });\n\n  test('should display recipe creation form correctly', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Verify recipe creation form elements are present\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-form\"]'), 'Recipe form should be visible');\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-title\"]'), 'Title input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-description\"]'), 'Description input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-category\"]'), 'Category input should be present');\n      \n      // Check for ingredients section\n      assert.ok(\n        await browser.elementExists('[data-testid=\"ingredient-0\"]') ||\n        await browser.elementExists('[data-testid=\"ingredients-section\"]'),\n        'Ingredients section should be present'\n      );\n      \n      // Check for instructions section\n      assert.ok(\n        await browser.elementExists('[data-testid=\"instruction-0\"]') ||\n        await browser.elementExists('[data-testid=\"instructions-section\"]'),\n        'Instructions section should be present'\n      );\n      \n      // Check for save button\n      assert.ok(await browser.elementExists('[data-testid=\"save-recipe\"]'), 'Save button should be present');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-creation-form', error);\n    }\n  });\n\n  test('should successfully create a complete recipe', async () => {\n    try {\n      const newRecipe = generators.generateRecipe({\n        title: 'E2E Test Recipe',\n        description: 'A test recipe created by E2E tests',\n        category: 'Main Course',\n        cuisine: 'International',\n        ingredients: [\n          '2 cups test ingredient',\n          '1 tbsp test spice',\n          '1 lb test protein'\n        ],\n        instructions: [\n          'Prepare all test ingredients',\n          'Mix test ingredients together',\n          'Cook until test is complete'\n        ],\n        prepTime: 15,\n        cookTime: 30,\n        servings: 4,\n        calories: 350,\n        protein: 25,\n        carbs: 40,\n        fat: 12,\n        tags: ['test', 'e2e']\n      });\n      \n      const result = await recipes.createRecipe(newRecipe);\n      \n      assert.ok(result.success, 'Recipe creation should be successful');\n      assert.ok(result.recipeId || result.url, 'Should return recipe ID or redirect URL');\n      \n      // Verify we're redirected to the recipe detail page\n      const currentUrl = browser.getCurrentUrl();\n      assert.ok(\n        currentUrl.includes('/recipes/') && currentUrl !== '/recipes/create',\n        'Should redirect to recipe detail page after creation'\n      );\n      \n      // Verify recipe details are displayed correctly\n      if (await browser.elementExists('[data-testid=\"recipe-title\"]')) {\n        const displayedTitle = await browser.getElementText('[data-testid=\"recipe-title\"]');\n        assert.strictEqual(displayedTitle, newRecipe.title, 'Recipe title should match');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-creation-success', error);\n    }\n  });\n\n  test('should validate required fields', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Try to save empty form\n      await browser.clickElement('[data-testid=\"save-recipe\"]');\n      \n      // Check for validation errors\n      const validationErrors = [\n        '[data-testid=\"title-error\"]',\n        '[data-testid=\"description-error\"]',\n        '[data-testid=\"ingredients-error\"]',\n        '[data-testid=\"instructions-error\"]',\n        '[data-testid=\"validation-error\"]'\n      ];\n      \n      let hasValidationError = false;\n      for (const selector of validationErrors) {\n        if (await browser.elementExists(selector, 2000)) {\n          hasValidationError = true;\n          break;\n        }\n      }\n      \n      assert.ok(hasValidationError, 'Should show validation errors for empty form');\n      \n      // Verify we stay on creation page\n      const currentUrl = browser.getCurrentUrl();\n      assert.ok(currentUrl.includes('/create'), 'Should remain on creation page with validation errors');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-creation-validation', error);\n    }\n  });\n\n  test('should handle dynamic ingredient addition and removal', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Check initial ingredient fields\n      const initialIngredients = await browser.getPage().evaluate(() => {\n        return document.querySelectorAll('[data-testid^=\"ingredient-\"]').length;\n      });\n      \n      // Add ingredients dynamically\n      if (await browser.elementExists('[data-testid=\"add-ingredient\"]')) {\n        await browser.clickElement('[data-testid=\"add-ingredient\"]');\n        \n        const newIngredientsCount = await browser.getPage().evaluate(() => {\n          return document.querySelectorAll('[data-testid^=\"ingredient-\"]').length;\n        });\n        \n        assert.ok(\n          newIngredientsCount > initialIngredients,\n          'Should add new ingredient field when add button is clicked'\n        );\n        \n        // Fill the new ingredient field\n        await browser.fillInput(`[data-testid=\"ingredient-${newIngredientsCount - 1}\"]`, 'New test ingredient');\n        \n        // Verify the value was entered\n        const ingredientValue = await browser.getPage().$eval(\n          `[data-testid=\"ingredient-${newIngredientsCount - 1}\"]`,\n          el => el.value\n        );\n        assert.strictEqual(ingredientValue, 'New test ingredient', 'New ingredient should be filled');\n      }\n      \n      // Test removing ingredients if remove button exists\n      if (await browser.elementExists('[data-testid=\"remove-ingredient\"]')) {\n        const beforeRemoval = await browser.getPage().evaluate(() => {\n          return document.querySelectorAll('[data-testid^=\"ingredient-\"]').length;\n        });\n        \n        await browser.clickElement('[data-testid=\"remove-ingredient\"]');\n        \n        const afterRemoval = await browser.getPage().evaluate(() => {\n          return document.querySelectorAll('[data-testid^=\"ingredient-\"]').length;\n        });\n        \n        assert.ok(\n          afterRemoval < beforeRemoval,\n          'Should remove ingredient field when remove button is clicked'\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-dynamic-ingredients', error);\n    }\n  });\n\n  test('should handle dynamic instruction addition and removal', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Check initial instruction fields\n      const initialInstructions = await browser.getPage().evaluate(() => {\n        return document.querySelectorAll('[data-testid^=\"instruction-\"]').length;\n      });\n      \n      // Add instructions dynamically\n      if (await browser.elementExists('[data-testid=\"add-instruction\"]')) {\n        await browser.clickElement('[data-testid=\"add-instruction\"]');\n        \n        const newInstructionsCount = await browser.getPage().evaluate(() => {\n          return document.querySelectorAll('[data-testid^=\"instruction-\"]').length;\n        });\n        \n        assert.ok(\n          newInstructionsCount > initialInstructions,\n          'Should add new instruction field when add button is clicked'\n        );\n        \n        // Fill the new instruction field\n        await browser.fillInput(`[data-testid=\"instruction-${newInstructionsCount - 1}\"]`, 'New test instruction');\n        \n        // Verify the value was entered\n        const instructionValue = await browser.getPage().$eval(\n          `[data-testid=\"instruction-${newInstructionsCount - 1}\"]`,\n          el => el.value\n        );\n        assert.strictEqual(instructionValue, 'New test instruction', 'New instruction should be filled');\n      }\n      \n      // Test removing instructions if remove button exists\n      if (await browser.elementExists('[data-testid=\"remove-instruction\"]')) {\n        const beforeRemoval = await browser.getPage().evaluate(() => {\n          return document.querySelectorAll('[data-testid^=\"instruction-\"]').length;\n        });\n        \n        await browser.clickElement('[data-testid=\"remove-instruction\"]');\n        \n        const afterRemoval = await browser.getPage().evaluate(() => {\n          return document.querySelectorAll('[data-testid^=\"instruction-\"]').length;\n        });\n        \n        assert.ok(\n          afterRemoval < beforeRemoval,\n          'Should remove instruction field when remove button is clicked'\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-dynamic-instructions', error);\n    }\n  });\n\n  test('should handle recipe image upload', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Check for image upload functionality\n      const imageUploadExists = await browser.elementExists('[data-testid=\"image-upload\"]') ||\n                               await browser.elementExists('[data-testid=\"image-url\"]');\n      \n      if (imageUploadExists) {\n        if (await browser.elementExists('[data-testid=\"image-url\"]')) {\n          // Test URL input\n          const testImageUrl = 'https://example.com/test-recipe-image.jpg';\n          await browser.fillInput('[data-testid=\"image-url\"]', testImageUrl);\n          \n          const inputValue = await browser.getPage().$eval(\n            '[data-testid=\"image-url\"]',\n            el => el.value\n          );\n          assert.strictEqual(inputValue, testImageUrl, 'Image URL should be entered correctly');\n          \n        } else if (await browser.elementExists('[data-testid=\"image-upload\"]')) {\n          // Test file upload (note: actual file upload testing is complex in headless mode)\n          const uploadInput = await browser.waitForElement('[data-testid=\"image-upload\"]');\n          \n          // Verify upload input is functional\n          const isFileInput = await browser.getPage().evaluate((selector) => {\n            const input = document.querySelector(selector);\n            return input && input.type === 'file';\n          }, '[data-testid=\"image-upload\"]');\n          \n          assert.ok(isFileInput, 'Image upload should be a file input');\n        }\n      } else {\n        console.log('Image upload functionality not found, skipping test');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-image-upload', error);\n    }\n  });\n\n  test('should handle nutrition information input', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Check for nutrition fields\n      const nutritionFields = [\n        { field: 'calories', value: '350' },\n        { field: 'protein', value: '25' },\n        { field: 'carbs', value: '40' },\n        { field: 'fat', value: '12' }\n      ];\n      \n      for (const { field, value } of nutritionFields) {\n        const fieldExists = await browser.elementExists(`[data-testid=\"${field}\"]`);\n        if (fieldExists) {\n          await browser.fillInput(`[data-testid=\"${field}\"]`, value);\n          \n          const inputValue = await browser.getPage().$eval(\n            `[data-testid=\"${field}\"]`,\n            el => el.value\n          );\n          assert.strictEqual(inputValue, value, `${field} should be entered correctly`);\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-nutrition-input', error);\n    }\n  });\n\n  test('should handle recipe tags input', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Check for tags input\n      const tagsInputExists = await browser.elementExists('[data-testid=\"tag-input\"]') ||\n                             await browser.elementExists('[data-testid=\"tags\"]');\n      \n      if (tagsInputExists) {\n        const testTags = ['quick', 'easy', 'healthy'];\n        \n        for (const tag of testTags) {\n          // Different tag input implementations\n          if (await browser.elementExists('[data-testid=\"tag-input\"]')) {\n            await browser.fillInput('[data-testid=\"tag-input\"]', tag);\n            await browser.getPage().keyboard.press('Enter');\n          } else if (await browser.elementExists('[data-testid=\"tags\"]')) {\n            await browser.fillInput('[data-testid=\"tags\"]', tag + ',');\n          }\n          \n          // Verify tag was added\n          const tagAdded = await browser.elementExists(`[data-testid=\"tag-${tag}\"]`) ||\n                          await browser.elementExists(`[data-testid^=\"tag-\"]`);\n          \n          if (tagAdded) {\n            assert.ok(true, `Tag \"${tag}\" should be added`);\n          }\n        }\n      } else {\n        console.log('Tags input not found, skipping tags test');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-tags-input', error);\n    }\n  });\n\n  test('should handle recipe draft saving', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Fill partial recipe information\n      await browser.fillInput('[data-testid=\"recipe-title\"]', 'Draft Recipe Test');\n      await browser.fillInput('[data-testid=\"recipe-description\"]', 'This is a draft recipe for testing');\n      \n      // Look for draft/save button\n      const draftButtonExists = await browser.elementExists('[data-testid=\"save-draft\"]') ||\n                               await browser.elementExists('[data-testid=\"draft\"]');\n      \n      if (draftButtonExists) {\n        const draftSelector = await browser.elementExists('[data-testid=\"save-draft\"]') ?\n                             '[data-testid=\"save-draft\"]' : '[data-testid=\"draft\"]';\n        \n        await browser.clickElement(draftSelector);\n        \n        // Verify draft was saved (could be indicated by URL change, message, etc.)\n        const currentUrl = browser.getCurrentUrl();\n        const savedMessage = await browser.elementExists('[data-testid=\"saved-message\"]', 3000);\n        const draftSaved = currentUrl.includes('draft') || savedMessage;\n        \n        if (draftSaved) {\n          assert.ok(true, 'Recipe draft should be saved');\n        }\n      } else {\n        console.log('Draft saving functionality not found');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-draft-saving', error);\n    }\n  });\n\n  test('should handle form validation for individual fields', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Test title validation\n      await browser.fillInput('[data-testid=\"recipe-title\"]', '');\n      await browser.clickElement('[data-testid=\"save-recipe\"]');\n      \n      const titleError = await browser.elementExists('[data-testid=\"title-error\"]', 2000);\n      if (titleError) {\n        assert.ok(true, 'Should show error for empty title');\n      }\n      \n      // Test with invalid characters or length\n      const veryLongTitle = 'a'.repeat(300);\n      await browser.fillInput('[data-testid=\"recipe-title\"]', veryLongTitle);\n      \n      // Test numeric field validation (if nutrition fields exist)\n      if (await browser.elementExists('[data-testid=\"calories\"]')) {\n        await browser.fillInput('[data-testid=\"calories\"]', 'not-a-number');\n        await browser.clickElement('[data-testid=\"save-recipe\"]');\n        \n        const caloriesError = await browser.elementExists('[data-testid=\"calories-error\"]', 2000);\n        if (caloriesError) {\n          assert.ok(true, 'Should show error for invalid numeric input');\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-field-validation', error);\n    }\n  });\n\n  test('should handle network errors during recipe creation', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Fill in a basic recipe\n      await browser.fillInput('[data-testid=\"recipe-title\"]', 'Network Error Test Recipe');\n      await browser.fillInput('[data-testid=\"recipe-description\"]', 'Testing network error handling');\n      \n      if (await browser.elementExists('[data-testid=\"ingredient-0\"]')) {\n        await browser.fillInput('[data-testid=\"ingredient-0\"]', 'Test ingredient');\n      }\n      \n      if (await browser.elementExists('[data-testid=\"instruction-0\"]')) {\n        await browser.fillInput('[data-testid=\"instruction-0\"]', 'Test instruction');\n      }\n      \n      // Simulate network failure\n      await browser.getPage().setRequestInterception(true);\n      browser.getPage().on('request', (request) => {\n        if (request.url().includes('/api/v1/recipes') && request.method() === 'POST') {\n          request.abort();\n        } else {\n          request.continue();\n        }\n      });\n      \n      // Try to save recipe\n      await browser.clickElement('[data-testid=\"save-recipe\"]');\n      \n      // Check for error handling\n      const errorMessage = await browser.elementExists('[data-testid=\"error-message\"]', 10000);\n      if (errorMessage) {\n        const errorText = await browser.getElementText('[data-testid=\"error-message\"]');\n        assert.ok(\n          errorText.toLowerCase().includes('error') || \n          errorText.toLowerCase().includes('failed') ||\n          errorText.toLowerCase().includes('network'),\n          'Should show appropriate error message for network failure'\n        );\n      }\n      \n      // Restore normal request handling\n      await browser.getPage().setRequestInterception(false);\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-creation-network-error', error);\n    }\n  });\n\n  test('should handle canceling recipe creation', async () => {\n    try {\n      await recipes.goToCreateRecipe();\n      \n      // Fill in some data\n      await browser.fillInput('[data-testid=\"recipe-title\"]', 'Recipe to Cancel');\n      await browser.fillInput('[data-testid=\"recipe-description\"]', 'This recipe will be canceled');\n      \n      // Look for cancel button\n      const cancelButtonExists = await browser.elementExists('[data-testid=\"cancel\"]') ||\n                                await browser.elementExists('[data-testid=\"cancel-recipe\"]');\n      \n      if (cancelButtonExists) {\n        const cancelSelector = await browser.elementExists('[data-testid=\"cancel\"]') ?\n                              '[data-testid=\"cancel\"]' : '[data-testid=\"cancel-recipe\"]';\n        \n        await Promise.all([\n          browser.waitForNavigation(),\n          browser.clickElement(cancelSelector)\n        ]);\n        \n        // Verify we're redirected away from creation page\n        const currentUrl = browser.getCurrentUrl();\n        assert.ok(\n          !currentUrl.includes('/create'),\n          'Should navigate away from creation page when canceled'\n        );\n      } else {\n        // Try browser back button as alternative\n        await browser.getPage().goBack({ waitUntil: 'networkidle0' });\n        \n        const currentUrl = browser.getCurrentUrl();\n        assert.ok(\n          !currentUrl.includes('/create'),\n          'Browser back should work as cancel alternative'\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-creation-cancel', error);\n    }\n  });\n\n  test('should be responsive on different screen sizes', async () => {\n    try {\n      // Test desktop view\n      await browser.getPage().setViewport({ width: 1920, height: 1080 });\n      await recipes.goToCreateRecipe();\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-form\"]'),\n        'Recipe form should display on desktop'\n      );\n      \n      // Test mobile view\n      await browser.getPage().setViewport({ width: 375, height: 667 });\n      await browser.getPage().reload({ waitUntil: 'networkidle0' });\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-form\"]'),\n        'Recipe form should display on mobile'\n      );\n      \n      // Test form interaction on mobile\n      await browser.fillInput('[data-testid=\"recipe-title\"]', 'Mobile Test Recipe');\n      \n      const titleValue = await browser.getPage().$eval(\n        '[data-testid=\"recipe-title\"]',\n        el => el.value\n      );\n      assert.strictEqual(titleValue, 'Mobile Test Recipe', 'Form input should work on mobile');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-creation-responsive', error);\n    }\n  });\n});