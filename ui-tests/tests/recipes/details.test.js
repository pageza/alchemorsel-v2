const { test, describe, beforeEach, afterEach } = require('node:test');\nconst assert = require('node:assert');\nrequire('dotenv').config();\n\nconst BrowserManager = require('../../helpers/browser');\nconst AuthHelper = require('../../helpers/auth');\nconst RecipeHelper = require('../../helpers/recipes');\nconst { generators } = require('../../helpers/fixtures');\n\ndescribe('Recipe Details View', () => {\n  let browser;\n  let auth;\n  let recipes;\n\n  beforeEach(async () => {\n    browser = new BrowserManager();\n    await browser.launch();\n    auth = new AuthHelper(browser);\n    recipes = new RecipeHelper(browser);\n  });\n\n  afterEach(async () => {\n    if (browser) {\n      await browser.close();\n    }\n  });\n\n  test('should display recipe details page correctly', async () => {\n    try {\n      // First get a recipe from the list\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test details view');\n        return;\n      }\n      \n      const firstRecipe = recipeList[0];\n      const recipeDetails = await recipes.viewRecipeDetails(firstRecipe.id);\n      \n      // Verify recipe details structure\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-detail\"]'), 'Recipe detail container should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-title\"]'), 'Recipe title should be displayed');\n      assert.ok(await browser.elementExists('[data-testid=\"recipe-description\"]'), 'Recipe description should be displayed');\n      \n      // Verify ingredients section\n      const ingredientsExist = await browser.elementExists('[data-testid^=\"ingredient-\"]') ||\n                              await browser.elementExists('[data-testid=\"ingredients-list\"]');\n      assert.ok(ingredientsExist, 'Ingredients section should be present');\n      \n      // Verify instructions section\n      const instructionsExist = await browser.elementExists('[data-testid^=\"instruction-\"]') ||\n                               await browser.elementExists('[data-testid=\"instructions-list\"]');\n      assert.ok(instructionsExist, 'Instructions section should be present');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-details-display', error);\n    }\n  });\n\n  test('should display recipe ingredients correctly', async () => {\n    try {\n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test ingredients');\n        return;\n      }\n      \n      const recipeDetails = await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for ingredients list\n      const hasIngredients = await browser.elementExists('[data-testid=\"ingredients-list\"]') ||\n                           await browser.elementExists('[data-testid^=\"ingredient-\"]');\n      assert.ok(hasIngredients, 'Ingredients should be displayed');\n      \n      if (recipeDetails.ingredients && recipeDetails.ingredients.length > 0) {\n        // Verify each ingredient is displayed\n        for (let i = 0; i < Math.min(recipeDetails.ingredients.length, 5); i++) {\n          const ingredientExists = await browser.elementExists(`[data-testid=\"ingredient-${i}\"]`);\n          if (ingredientExists) {\n            const ingredientText = await browser.getElementText(`[data-testid=\"ingredient-${i}\"]`);\n            assert.ok(ingredientText.length > 0, `Ingredient ${i} should have text content`);\n          }\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-ingredients', error);\n    }\n  });\n\n  test('should display recipe instructions correctly', async () => {\n    try {\n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test instructions');\n        return;\n      }\n      \n      const recipeDetails = await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for instructions list\n      const hasInstructions = await browser.elementExists('[data-testid=\"instructions-list\"]') ||\n                            await browser.elementExists('[data-testid^=\"instruction-\"]');\n      assert.ok(hasInstructions, 'Instructions should be displayed');\n      \n      if (recipeDetails.instructions && recipeDetails.instructions.length > 0) {\n        // Verify each instruction is displayed\n        for (let i = 0; i < Math.min(recipeDetails.instructions.length, 5); i++) {\n          const instructionExists = await browser.elementExists(`[data-testid=\"instruction-${i}\"]`);\n          if (instructionExists) {\n            const instructionText = await browser.getElementText(`[data-testid=\"instruction-${i}\"]`);\n            assert.ok(instructionText.length > 0, `Instruction ${i} should have text content`);\n          }\n        }\n      }\n      \n      // Verify instructions are numbered or ordered\n      const numberedInstructions = await browser.getPage().evaluate(() => {\n        const instructions = document.querySelectorAll('[data-testid^=\"instruction-\"]');\n        return Array.from(instructions).some(el => {\n          return el.textContent.match(/^\\d+\\./) || el.closest('ol') || el.classList.contains('numbered');\n        });\n      });\n      \n      if (numberedInstructions) {\n        assert.ok(true, 'Instructions should be numbered or in ordered list');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-instructions', error);\n    }\n  });\n\n  test('should display nutrition information if available', async () => {\n    try {\n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test nutrition');\n        return;\n      }\n      \n      const recipeDetails = await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for nutrition section\n      const nutritionExists = await browser.elementExists('[data-testid=\"nutrition-section\"]') ||\n                             await browser.elementExists('[data-testid=\"nutrition-calories\"]');\n      \n      if (nutritionExists) {\n        // Check for common nutrition fields\n        const nutritionFields = ['calories', 'protein', 'carbs', 'fat'];\n        \n        for (const field of nutritionFields) {\n          const fieldExists = await browser.elementExists(`[data-testid=\"nutrition-${field}\"]`);\n          if (fieldExists) {\n            const value = await browser.getElementText(`[data-testid=\"nutrition-${field}\"]`);\n            assert.ok(value.length > 0, `Nutrition ${field} should have a value`);\n          }\n        }\n      } else {\n        console.log('Nutrition information not available for this recipe');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-nutrition', error);\n    }\n  });\n\n  test('should display recipe metadata (category, cuisine, etc.)', async () => {\n    try {\n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test metadata');\n        return;\n      }\n      \n      const recipeDetails = await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for metadata fields\n      const metadataFields = [\n        { field: 'category', testId: 'recipe-category' },\n        { field: 'cuisine', testId: 'recipe-cuisine' },\n        { field: 'author', testId: 'recipe-author' },\n        { field: 'prepTime', testId: 'prep-time' },\n        { field: 'cookTime', testId: 'cook-time' },\n        { field: 'servings', testId: 'servings' }\n      ];\n      \n      for (const { field, testId } of metadataFields) {\n        const fieldExists = await browser.elementExists(`[data-testid=\"${testId}\"]`);\n        if (fieldExists) {\n          const value = await browser.getElementText(`[data-testid=\"${testId}\"]`);\n          assert.ok(value.length > 0, `${field} should have a value when displayed`);\n        }\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-metadata', error);\n    }\n  });\n\n  test('should display recipe tags if available', async () => {\n    try {\n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test tags');\n        return;\n      }\n      \n      const recipeDetails = await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for tags section\n      const tagsExist = await browser.elementExists('[data-testid=\"tags-section\"]') ||\n                       await browser.elementExists('[data-testid^=\"tag-\"]');\n      \n      if (tagsExist) {\n        if (recipeDetails.tags && recipeDetails.tags.length > 0) {\n          // Verify each tag is displayed\n          for (let i = 0; i < Math.min(recipeDetails.tags.length, 5); i++) {\n            const tagExists = await browser.elementExists(`[data-testid=\"tag-${i}\"]`) ||\n                            await browser.elementExists(`[data-testid=\"tag-${recipeDetails.tags[i]}\"]`);\n            if (tagExists) {\n              assert.ok(true, `Tag ${i} should be displayed`);\n            }\n          }\n        }\n      } else {\n        console.log('No tags available for this recipe');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-tags', error);\n    }\n  });\n\n  test('should handle favorite button for authenticated users', async () => {\n    try {\n      // Login first\n      await auth.loginAsTestUser();\n      \n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test favorites');\n        return;\n      }\n      \n      await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for favorite button\n      const favoriteButtonExists = await browser.elementExists('[data-testid=\"favorite-button\"]');\n      assert.ok(favoriteButtonExists, 'Favorite button should be present for authenticated users');\n      \n      // Get initial favorite state\n      const initialFavoriteState = await browser.getPage().evaluate(() => {\n        const button = document.querySelector('[data-testid=\"favorite-button\"]');\n        return button && button.classList.contains('favorite');\n      });\n      \n      // Toggle favorite\n      await recipes.toggleFavorite();\n      \n      // Verify state changed\n      const newFavoriteState = await browser.getPage().evaluate(() => {\n        const button = document.querySelector('[data-testid=\"favorite-button\"]');\n        return button && button.classList.contains('favorite');\n      });\n      \n      assert.notStrictEqual(\n        initialFavoriteState,\n        newFavoriteState,\n        'Favorite state should change when toggled'\n      );\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-favorite-auth', error);\n    }\n  });\n\n  test('should handle favorite button for guest users', async () => {\n    try {\n      // Ensure not logged in\n      await auth.clearAuthState();\n      \n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test guest favorites');\n        return;\n      }\n      \n      await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check favorite button behavior for guests\n      const favoriteButtonExists = await browser.elementExists('[data-testid=\"favorite-button\"]');\n      \n      if (favoriteButtonExists) {\n        // Click favorite button as guest\n        await browser.clickElement('[data-testid=\"favorite-button\"]');\n        \n        // Should be redirected to login or show login prompt\n        const redirectedToLogin = browser.getCurrentUrl().includes('/login');\n        const loginPromptExists = await browser.elementExists('[data-testid=\"login-prompt\"]', 3000);\n        \n        assert.ok(\n          redirectedToLogin || loginPromptExists,\n          'Guest users should be prompted to login when favoriting'\n        );\n      } else {\n        // Favorite button might be hidden for guests\n        console.log('Favorite button not shown to guest users');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-favorite-guest', error);\n    }\n  });\n\n  test('should handle recipe image display', async () => {\n    try {\n      // Navigate to first available recipe\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test images');\n        return;\n      }\n      \n      await recipes.viewRecipeDetails(recipeList[0].id);\n      \n      // Check for recipe image\n      const imageExists = await browser.elementExists('[data-testid=\"recipe-image\"]');\n      \n      if (imageExists) {\n        // Verify image loads correctly\n        const imageLoaded = await browser.getPage().evaluate(() => {\n          const img = document.querySelector('[data-testid=\"recipe-image\"]');\n          return img && img.complete && img.naturalHeight !== 0;\n        });\n        \n        if (imageLoaded) {\n          assert.ok(true, 'Recipe image should load correctly');\n        } else {\n          // Check for placeholder or fallback\n          const placeholderExists = await browser.elementExists('[data-testid=\"image-placeholder\"]');\n          if (placeholderExists) {\n            assert.ok(true, 'Image placeholder should be shown for broken images');\n          }\n        }\n      } else {\n        console.log('No recipe image available');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-image', error);\n    }\n  });\n\n  test('should handle navigation back to recipe list', async () => {\n    try {\n      // Start at recipe list\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test navigation');\n        return;\n      }\n      \n      // Navigate to recipe details\n      await recipes.viewRecipeDetails(recipeList[0].id);\n      assert.ok(\n        browser.getCurrentUrl().includes('/recipes/'),\n        'Should be on recipe detail page'\n      );\n      \n      // Check for back navigation\n      const backButtonExists = await browser.elementExists('[data-testid=\"back-button\"]') ||\n                              await browser.elementExists('[data-testid=\"back-to-recipes\"]');\n      \n      if (backButtonExists) {\n        const backSelector = await browser.elementExists('[data-testid=\"back-button\"]') ?\n                           '[data-testid=\"back-button\"]' : '[data-testid=\"back-to-recipes\"]';\n        \n        await Promise.all([\n          browser.waitForNavigation(),\n          browser.clickElement(backSelector)\n        ]);\n        \n        // Verify we're back at recipe list\n        assert.ok(\n          browser.getCurrentUrl().includes('/recipes') && !browser.getCurrentUrl().match(/\\/recipes\\/\\w+$/),\n          'Should navigate back to recipe list'\n        );\n      } else {\n        // Try browser back button\n        await browser.getPage().goBack({ waitUntil: 'networkidle0' });\n        \n        assert.ok(\n          browser.getCurrentUrl().includes('/recipes') && !browser.getCurrentUrl().match(/\\/recipes\\/\\w+$/),\n          'Browser back button should work'\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-navigation-back', error);\n    }\n  });\n\n  test('should handle invalid recipe ID', async () => {\n    try {\n      // Try to access recipe with non-existent ID\n      const invalidId = 'non-existent-recipe-id-12345';\n      await browser.navigate(`/recipes/${invalidId}`);\n      \n      // Check for error handling\n      const errorExists = await browser.elementExists('[data-testid=\"error-message\"]', 5000) ||\n                         await browser.elementExists('[data-testid=\"not-found\"]', 5000) ||\n                         await browser.elementExists('[data-testid=\"recipe-not-found\"]', 5000);\n      \n      if (errorExists) {\n        assert.ok(true, 'Should show error message for invalid recipe ID');\n      } else {\n        // Check if redirected to recipe list or 404 page\n        const currentUrl = browser.getCurrentUrl();\n        const redirectedToList = currentUrl.includes('/recipes') && !currentUrl.includes(invalidId);\n        const is404Page = currentUrl.includes('404') || currentUrl.includes('not-found');\n        \n        assert.ok(\n          redirectedToList || is404Page,\n          'Should redirect to recipe list or 404 page for invalid ID'\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-invalid-id', error);\n    }\n  });\n\n  test('should be responsive on different screen sizes', async () => {\n    try {\n      // Get a recipe to test with\n      await recipes.goToRecipesList();\n      const recipeList = await recipes.getRecipeResults();\n      \n      if (recipeList.length === 0) {\n        console.log('No recipes available to test responsive design');\n        return;\n      }\n      \n      const recipeId = recipeList[0].id;\n      \n      // Test desktop view\n      await browser.getPage().setViewport({ width: 1920, height: 1080 });\n      await recipes.viewRecipeDetails(recipeId);\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-detail\"]'),\n        'Recipe details should display on desktop'\n      );\n      \n      // Test mobile view\n      await browser.getPage().setViewport({ width: 375, height: 667 });\n      await browser.getPage().reload({ waitUntil: 'networkidle0' });\n      \n      assert.ok(\n        await browser.elementExists('[data-testid=\"recipe-detail\"]'),\n        'Recipe details should display on mobile'\n      );\n      \n      // Verify mobile layout adjustments\n      const mobileOptimized = await browser.getPage().evaluate(() => {\n        const container = document.querySelector('[data-testid=\"recipe-detail\"]');\n        if (!container) return false;\n        \n        const styles = window.getComputedStyle(container);\n        return styles.display === 'block' || styles.flexDirection === 'column';\n      });\n      \n      if (mobileOptimized) {\n        assert.ok(true, 'Recipe layout should be optimized for mobile');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('recipe-details-responsive', error);\n    }\n  });\n});