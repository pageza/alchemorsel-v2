const { test, describe, beforeEach, afterEach } = require('node:test');\nconst assert = require('node:assert');\nrequire('dotenv').config();\n\nconst BrowserManager = require('../../helpers/browser');\nconst AuthHelper = require('../../helpers/auth');\nconst { testUsers, validationTests, generators } = require('../../helpers/fixtures');\n\ndescribe('Authentication - Registration Flow', () => {\n  let browser;\n  let auth;\n\n  beforeEach(async () => {\n    browser = new BrowserManager();\n    await browser.launch();\n    auth = new AuthHelper(browser);\n  });\n\n  afterEach(async () => {\n    if (browser) {\n      await browser.close();\n    }\n  });\n\n  test('should display registration form correctly', async () => {\n    try {\n      await auth.goToRegister();\n      \n      // Verify registration form elements are present\n      assert.ok(await browser.elementExists('[data-testid=\"register-form\"]'), 'Registration form should be visible');\n      assert.ok(await browser.elementExists('[data-testid=\"email-input\"]'), 'Email input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"username-input\"]'), 'Username input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"password-input\"]'), 'Password input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"confirm-password-input\"]'), 'Confirm password input should be present');\n      assert.ok(await browser.elementExists('[data-testid=\"register-submit\"]'), 'Register button should be present');\n      \n      // Check for login link\n      assert.ok(await browser.elementExists('[data-testid=\"login-link\"]'), 'Login link should be present');\n      \n      // Check for dietary preferences section\n      if (await browser.elementExists('[data-testid=\"dietary-preferences\"]')) {\n        assert.ok(true, 'Dietary preferences section is available');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-form-display', error);\n    }\n  });\n\n  test('should successfully register a new user', async () => {\n    try {\n      const newUser = generators.generateUser({\n        dietaryPreferences: ['vegetarian'],\n        allergies: ['nuts']\n      });\n      \n      const registrationSuccess = await auth.register(newUser);\n      \n      assert.ok(registrationSuccess, 'Registration should be successful');\n      \n      // Verify we're redirected to dashboard or home\n      const currentUrl = browser.getCurrentUrl();\n      assert.ok(\n        currentUrl.includes('/dashboard') || currentUrl === '/' || currentUrl.includes('/recipes'),\n        `Should redirect to dashboard or home after registration, got: ${currentUrl}`\n      );\n      \n      // Verify user is logged in\n      const isLoggedIn = await auth.isLoggedIn();\n      assert.ok(isLoggedIn, 'User should be logged in after successful registration');\n      \n      // Verify user information is available\n      const currentUser = await auth.getCurrentUser();\n      if (currentUser) {\n        assert.strictEqual(currentUser.email, newUser.email, 'User email should match');\n        assert.strictEqual(currentUser.username, newUser.username, 'Username should match');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-success', error);\n    }\n  });\n\n  test('should validate email format during registration', async () => {\n    try {\n      await auth.goToRegister();\n      \n      for (const invalidEmail of validationTests.email.invalid) {\n        await browser.fillInput('[data-testid=\"email-input\"]', invalidEmail);\n        await browser.fillInput('[data-testid=\"username-input\"]', 'testuser');\n        await browser.fillInput('[data-testid=\"password-input\"]', 'ValidPassword123!');\n        await browser.fillInput('[data-testid=\"confirm-password-input\"]', 'ValidPassword123!');\n        \n        // Try to submit\n        await browser.clickElement('[data-testid=\"register-submit\"]');\n        \n        // Check for validation error\n        const hasValidationError = await browser.elementExists('[data-testid=\"email-error\"]', 2000) ||\n                                  await browser.elementExists('[data-testid=\"validation-error\"]', 2000);\n        \n        if (hasValidationError) {\n          assert.ok(true, `Email validation should catch invalid format: ${invalidEmail}`);\n        }\n        \n        // Clear the field for next test\n        await browser.fillInput('[data-testid=\"email-input\"]', '');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-email-validation', error);\n    }\n  });\n\n  test('should validate password strength', async () => {\n    try {\n      await auth.goToRegister();\n      \n      for (const weakPassword of validationTests.password.invalid) {\n        await browser.fillInput('[data-testid=\"email-input\"]', 'test@example.com');\n        await browser.fillInput('[data-testid=\"username-input\"]', 'testuser');\n        await browser.fillInput('[data-testid=\"password-input\"]', weakPassword);\n        await browser.fillInput('[data-testid=\"confirm-password-input\"]', weakPassword);\n        \n        // Try to submit\n        await browser.clickElement('[data-testid=\"register-submit\"]');\n        \n        // Check for password validation error\n        const hasPasswordError = await browser.elementExists('[data-testid=\"password-error\"]', 2000) ||\n                                await browser.elementExists('[data-testid=\"validation-error\"]', 2000);\n        \n        if (hasPasswordError) {\n          assert.ok(true, `Password validation should catch weak password: ${weakPassword}`);\n        }\n        \n        // Clear the fields for next test\n        await browser.fillInput('[data-testid=\"password-input\"]', '');\n        await browser.fillInput('[data-testid=\"confirm-password-input\"]', '');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-password-validation', error);\n    }\n  });\n\n  test('should validate password confirmation match', async () => {\n    try {\n      await auth.goToRegister();\n      \n      await browser.fillInput('[data-testid=\"email-input\"]', 'test@example.com');\n      await browser.fillInput('[data-testid=\"username-input\"]', 'testuser');\n      await browser.fillInput('[data-testid=\"password-input\"]', 'ValidPassword123!');\n      await browser.fillInput('[data-testid=\"confirm-password-input\"]', 'DifferentPassword123!');\n      \n      // Try to submit\n      await browser.clickElement('[data-testid=\"register-submit\"]');\n      \n      // Check for password mismatch error\n      const hasPasswordError = await browser.elementExists('[data-testid=\"confirm-password-error\"]', 2000) ||\n                              await browser.elementExists('[data-testid=\"password-mismatch-error\"]', 2000) ||\n                              await browser.elementExists('[data-testid=\"validation-error\"]', 2000);\n      \n      assert.ok(hasPasswordError, 'Should show error when passwords do not match');\n      \n      if (await browser.elementExists('[data-testid=\"confirm-password-error\"]')) {\n        const errorText = await browser.getElementText('[data-testid=\"confirm-password-error\"]');\n        assert.ok(\n          errorText.toLowerCase().includes('match') || errorText.toLowerCase().includes('confirm'),\n          `Password mismatch error should be descriptive, got: ${errorText}`\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-password-mismatch', error);\n    }\n  });\n\n  test('should validate username requirements', async () => {\n    try {\n      await auth.goToRegister();\n      \n      for (const invalidUsername of validationTests.username.invalid) {\n        await browser.fillInput('[data-testid=\"email-input\"]', 'test@example.com');\n        await browser.fillInput('[data-testid=\"username-input\"]', invalidUsername);\n        await browser.fillInput('[data-testid=\"password-input\"]', 'ValidPassword123!');\n        await browser.fillInput('[data-testid=\"confirm-password-input\"]', 'ValidPassword123!');\n        \n        // Try to submit\n        await browser.clickElement('[data-testid=\"register-submit\"]');\n        \n        // Check for username validation error\n        const hasUsernameError = await browser.elementExists('[data-testid=\"username-error\"]', 2000) ||\n                               await browser.elementExists('[data-testid=\"validation-error\"]', 2000);\n        \n        if (hasUsernameError) {\n          assert.ok(true, `Username validation should catch invalid format: ${invalidUsername}`);\n        }\n        \n        // Clear the field for next test\n        await browser.fillInput('[data-testid=\"username-input\"]', '');\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-username-validation', error);\n    }\n  });\n\n  test('should handle duplicate email registration', async () => {\n    try {\n      const existingUser = {\n        email: process.env.TEST_USER_EMAIL || 'test@alchemorsel.com',\n        username: 'differentuser',\n        password: 'ValidPassword123!'\n      };\n      \n      const registrationAttempt = await auth.register(existingUser, {\n        expectSuccess: false,\n        waitForRedirect: false\n      });\n      \n      assert.ok(!registrationAttempt, 'Registration with duplicate email should fail');\n      \n      // Check for duplicate email error\n      const errorExists = await browser.elementExists('[data-testid=\"error-message\"]', 5000) ||\n                         await browser.elementExists('[data-testid=\"email-error\"]', 5000);\n      \n      if (errorExists) {\n        const errorSelector = await browser.elementExists('[data-testid=\"error-message\"]') ? \n                             '[data-testid=\"error-message\"]' : '[data-testid=\"email-error\"]';\n        const errorText = await browser.getElementText(errorSelector);\n        assert.ok(\n          errorText.toLowerCase().includes('exists') || \n          errorText.toLowerCase().includes('taken') ||\n          errorText.toLowerCase().includes('already'),\n          `Error message should indicate email already exists, got: ${errorText}`\n        );\n      }\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-duplicate-email', error);\n    }\n  });\n\n  test('should handle dietary preferences selection', async () => {\n    try {\n      await auth.goToRegister();\n      \n      // Check if dietary preferences section exists\n      if (!(await browser.elementExists('[data-testid=\"dietary-preferences\"]'))) {\n        console.log('Dietary preferences section not found, skipping test');\n        return;\n      }\n      \n      const newUser = generators.generateUser();\n      const dietaryPreferences = ['vegetarian', 'gluten-free'];\n      \n      // Fill basic registration form\n      await browser.fillInput('[data-testid=\"email-input\"]', newUser.email);\n      await browser.fillInput('[data-testid=\"username-input\"]', newUser.username);\n      await browser.fillInput('[data-testid=\"password-input\"]', newUser.password);\n      await browser.fillInput('[data-testid=\"confirm-password-input\"]', newUser.password);\n      \n      // Select dietary preferences\n      for (const preference of dietaryPreferences) {\n        const selector = `[data-testid=\"dietary-${preference}\"]`;\n        if (await browser.elementExists(selector)) {\n          await browser.clickElement(selector);\n          \n          // Verify selection\n          const isSelected = await browser.getPage().evaluate((sel) => {\n            const element = document.querySelector(sel);\n            return element && (element.checked || element.classList.contains('selected'));\n          }, selector);\n          \n          assert.ok(isSelected, `Dietary preference ${preference} should be selected`);\n        }\n      }\n      \n      // Submit registration\n      const registrationSuccess = await auth.register({\n        ...newUser,\n        dietaryPreferences\n      });\n      \n      assert.ok(registrationSuccess, 'Registration with dietary preferences should be successful');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-dietary-preferences', error);\n    }\n  });\n\n  test('should handle allergies selection', async () => {\n    try {\n      await auth.goToRegister();\n      \n      // Check if allergies section exists\n      if (!(await browser.elementExists('[data-testid=\"allergies\"]'))) {\n        console.log('Allergies section not found, skipping test');\n        return;\n      }\n      \n      const newUser = generators.generateUser();\n      const allergies = ['nuts', 'dairy'];\n      \n      // Fill basic registration form\n      await browser.fillInput('[data-testid=\"email-input\"]', newUser.email);\n      await browser.fillInput('[data-testid=\"username-input\"]', newUser.username);\n      await browser.fillInput('[data-testid=\"password-input\"]', newUser.password);\n      await browser.fillInput('[data-testid=\"confirm-password-input\"]', newUser.password);\n      \n      // Select allergies\n      for (const allergy of allergies) {\n        const selector = `[data-testid=\"allergy-${allergy}\"]`;\n        if (await browser.elementExists(selector)) {\n          await browser.clickElement(selector);\n          \n          // Verify selection\n          const isSelected = await browser.getPage().evaluate((sel) => {\n            const element = document.querySelector(sel);\n            return element && (element.checked || element.classList.contains('selected'));\n          }, selector);\n          \n          assert.ok(isSelected, `Allergy ${allergy} should be selected`);\n        }\n      }\n      \n      // Submit registration\n      const registrationSuccess = await auth.register({\n        ...newUser,\n        allergies\n      });\n      \n      assert.ok(registrationSuccess, 'Registration with allergies should be successful');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-allergies', error);\n    }\n  });\n\n  test('should handle network errors during registration', async () => {\n    try {\n      await auth.goToRegister();\n      \n      // Simulate network failure\n      await browser.getPage().setRequestInterception(true);\n      browser.getPage().on('request', (request) => {\n        if (request.url().includes('/api/v1/auth/register')) {\n          request.abort();\n        } else {\n          request.continue();\n        }\n      });\n      \n      const newUser = generators.generateUser();\n      \n      // Try to register\n      await browser.fillInput('[data-testid=\"email-input\"]', newUser.email);\n      await browser.fillInput('[data-testid=\"username-input\"]', newUser.username);\n      await browser.fillInput('[data-testid=\"password-input\"]', newUser.password);\n      await browser.fillInput('[data-testid=\"confirm-password-input\"]', newUser.password);\n      await browser.clickElement('[data-testid=\"register-submit\"]');\n      \n      // Check for network error handling\n      const errorExists = await browser.elementExists('[data-testid=\"error-message\"]', 10000);\n      if (errorExists) {\n        const errorText = await browser.getElementText('[data-testid=\"error-message\"]');\n        assert.ok(\n          errorText.toLowerCase().includes('network') || \n          errorText.toLowerCase().includes('connection') ||\n          errorText.toLowerCase().includes('error'),\n          `Should show network error message, got: ${errorText}`\n        );\n      }\n      \n      // Restore normal request handling\n      await browser.getPage().setRequestInterception(false);\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-network-error', error);\n    }\n  });\n\n  test('should handle empty form submission', async () => {\n    try {\n      await auth.goToRegister();\n      \n      // Try to submit empty form\n      await browser.clickElement('[data-testid=\"register-submit\"]');\n      \n      // Check that we stay on registration page\n      const currentUrl = browser.getCurrentUrl();\n      assert.ok(currentUrl.includes('/register'), 'Should remain on registration page with empty form');\n      \n      // Check for validation errors\n      const hasEmailError = await browser.elementExists('[data-testid=\"email-error\"]', 2000);\n      const hasUsernameError = await browser.elementExists('[data-testid=\"username-error\"]', 2000);\n      const hasPasswordError = await browser.elementExists('[data-testid=\"password-error\"]', 2000);\n      const hasGeneralError = await browser.elementExists('[data-testid=\"validation-error\"]', 2000);\n      \n      assert.ok(\n        hasEmailError || hasUsernameError || hasPasswordError || hasGeneralError,\n        'Should show validation errors for empty form'\n      );\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-empty-form', error);\n    }\n  });\n\n  test('should navigate between login and register pages', async () => {\n    try {\n      // Start at registration page\n      await auth.goToRegister();\n      assert.ok(browser.getCurrentUrl().includes('/register'), 'Should be on registration page');\n      \n      // Click login link\n      await browser.clickElement('[data-testid=\"login-link\"]');\n      await browser.waitForNavigation();\n      \n      assert.ok(browser.getCurrentUrl().includes('/login'), 'Should navigate to login page');\n      \n      // Go back to registration from login\n      await browser.clickElement('[data-testid=\"register-link\"]');\n      await browser.waitForNavigation();\n      \n      assert.ok(browser.getCurrentUrl().includes('/register'), 'Should navigate back to registration page');\n      \n    } catch (error) {\n      await browser.screenshotOnFailure('register-login-navigation', error);\n    }\n  });\n});