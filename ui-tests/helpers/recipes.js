/**\n * Recipe management helper utilities for E2E tests\n */\nclass RecipeHelper {\n  constructor(browserManager) {\n    this.browser = browserManager;\n    this.page = browserManager.getPage();\n  }\n\n  /**\n   * Navigate to recipes listing page\n   */\n  async goToRecipesList() {\n    await this.browser.navigate('/recipes');\n    await this.browser.waitForElement('[data-testid=\"recipe-list\"]');\n  }\n\n  /**\n   * Navigate to recipe creation page\n   */\n  async goToCreateRecipe() {\n    await this.browser.navigate('/recipes/create');\n    await this.browser.waitForElement('[data-testid=\"recipe-form\"]');\n  }\n\n  /**\n   * Navigate to AI recipe generation page\n   */\n  async goToGenerateRecipe() {\n    await this.browser.navigate('/generate');\n    await this.browser.waitForElement('[data-testid=\"recipe-generator\"]');\n  }\n\n  /**\n   * Search for recipes\n   */\n  async searchRecipes(query, options = {}) {\n    const { waitForResults = true } = options;\n\n    // Ensure we're on the recipes page\n    if (!this.browser.getCurrentUrl().includes('/recipes')) {\n      await this.goToRecipesList();\n    }\n\n    // Find and use search input\n    await this.browser.fillInput('[data-testid=\"recipe-search\"]', query);\n    \n    // Trigger search (could be automatic or require button click)\n    if (await this.browser.elementExists('[data-testid=\"search-button\"]')) {\n      await this.browser.clickElement('[data-testid=\"search-button\"]');\n    } else {\n      // Trigger search with Enter key\n      await this.page.keyboard.press('Enter');\n    }\n\n    if (waitForResults) {\n      // Wait for search results to load\n      await this.browser.waitForElement('[data-testid=\"recipe-list\"]');\n      // Wait for loading spinner to disappear\n      await this.page.waitForFunction(() => {\n        const spinner = document.querySelector('[data-testid=\"loading-spinner\"]');\n        return !spinner || spinner.style.display === 'none';\n      }, { timeout: 10000 }).catch(() => {\n        // Continue if spinner check fails\n      });\n    }\n\n    return this.getRecipeResults();\n  }\n\n  /**\n   * Filter recipes by category\n   */\n  async filterByCategory(category) {\n    // Ensure we're on the recipes page\n    if (!this.browser.getCurrentUrl().includes('/recipes')) {\n      await this.goToRecipesList();\n    }\n\n    // Find and click category filter\n    const categorySelector = `[data-testid=\"filter-category-${category.toLowerCase()}\"]`;\n    await this.browser.clickElement(categorySelector);\n\n    // Wait for filtered results\n    await this.browser.waitForElement('[data-testid=\"recipe-list\"]');\n    \n    return this.getRecipeResults();\n  }\n\n  /**\n   * Sort recipes\n   */\n  async sortRecipes(sortBy) {\n    // Ensure we're on the recipes page\n    if (!this.browser.getCurrentUrl().includes('/recipes')) {\n      await this.goToRecipesList();\n    }\n\n    // Find and use sort dropdown\n    await this.browser.clickElement('[data-testid=\"sort-dropdown\"]');\n    await this.browser.clickElement(`[data-testid=\"sort-option-${sortBy}\"]`);\n\n    // Wait for sorted results\n    await this.browser.waitForElement('[data-testid=\"recipe-list\"]');\n    \n    return this.getRecipeResults();\n  }\n\n  /**\n   * Get recipe results from current page\n   */\n  async getRecipeResults() {\n    await this.browser.waitForElement('[data-testid=\"recipe-list\"]');\n    \n    return this.page.evaluate(() => {\n      const recipeCards = document.querySelectorAll('[data-testid^=\"recipe-card-\"]');\n      return Array.from(recipeCards).map(card => ({\n        id: card.getAttribute('data-recipe-id'),\n        title: card.querySelector('[data-testid=\"recipe-title\"]')?.textContent?.trim(),\n        description: card.querySelector('[data-testid=\"recipe-description\"]')?.textContent?.trim(),\n        category: card.querySelector('[data-testid=\"recipe-category\"]')?.textContent?.trim(),\n        author: card.querySelector('[data-testid=\"recipe-author\"]')?.textContent?.trim(),\n        isFavorite: card.querySelector('[data-testid=\"favorite-button\"]')?.classList.contains('favorite')\n      }));\n    });\n  }\n\n  /**\n   * View recipe details\n   */\n  async viewRecipeDetails(recipeId) {\n    await this.browser.navigate(`/recipes/${recipeId}`);\n    await this.browser.waitForElement('[data-testid=\"recipe-detail\"]');\n    \n    return this.getRecipeDetailsData();\n  }\n\n  /**\n   * Get recipe details data from current page\n   */\n  async getRecipeDetailsData() {\n    await this.browser.waitForElement('[data-testid=\"recipe-detail\"]');\n    \n    return this.page.evaluate(() => {\n      return {\n        title: document.querySelector('[data-testid=\"recipe-title\"]')?.textContent?.trim(),\n        description: document.querySelector('[data-testid=\"recipe-description\"]')?.textContent?.trim(),\n        category: document.querySelector('[data-testid=\"recipe-category\"]')?.textContent?.trim(),\n        cuisine: document.querySelector('[data-testid=\"recipe-cuisine\"]')?.textContent?.trim(),\n        author: document.querySelector('[data-testid=\"recipe-author\"]')?.textContent?.trim(),\n        ingredients: Array.from(document.querySelectorAll('[data-testid^=\"ingredient-\"]')).map(el => el.textContent.trim()),\n        instructions: Array.from(document.querySelectorAll('[data-testid^=\"instruction-\"]')).map(el => el.textContent.trim()),\n        nutrition: {\n          calories: document.querySelector('[data-testid=\"nutrition-calories\"]')?.textContent?.trim(),\n          protein: document.querySelector('[data-testid=\"nutrition-protein\"]')?.textContent?.trim(),\n          carbs: document.querySelector('[data-testid=\"nutrition-carbs\"]')?.textContent?.trim(),\n          fat: document.querySelector('[data-testid=\"nutrition-fat\"]')?.textContent?.trim()\n        },\n        tags: Array.from(document.querySelectorAll('[data-testid^=\"tag-\"]')).map(el => el.textContent.trim()),\n        isFavorite: document.querySelector('[data-testid=\"favorite-button\"]')?.classList.contains('favorite')\n      };\n    });\n  }\n\n  /**\n   * Toggle recipe favorite status\n   */\n  async toggleFavorite(recipeId = null) {\n    // If recipeId provided, navigate to recipe first\n    if (recipeId) {\n      await this.viewRecipeDetails(recipeId);\n    }\n\n    // Get current favorite status\n    const wasFavorite = await this.page.evaluate(() => {\n      return document.querySelector('[data-testid=\"favorite-button\"]')?.classList.contains('favorite');\n    });\n\n    // Click favorite button\n    await this.browser.clickElement('[data-testid=\"favorite-button\"]');\n\n    // Wait for state change\n    await this.page.waitForFunction((previousState) => {\n      const button = document.querySelector('[data-testid=\"favorite-button\"]');\n      return button && button.classList.contains('favorite') !== previousState;\n    }, {}, wasFavorite);\n\n    // Return new favorite status\n    return !wasFavorite;\n  }\n\n  /**\n   * Create a new recipe manually\n   */\n  async createRecipe(recipeData, options = {}) {\n    const { waitForSave = true } = options;\n    const {\n      title,\n      description,\n      category,\n      cuisine,\n      ingredients = [],\n      instructions = [],\n      prepTime,\n      cookTime,\n      servings,\n      calories,\n      protein,\n      carbs,\n      fat,\n      tags = [],\n      imageUrl\n    } = recipeData;\n\n    // Navigate to create recipe page\n    await this.goToCreateRecipe();\n\n    // Fill basic recipe information\n    if (title) await this.browser.fillInput('[data-testid=\"recipe-title\"]', title);\n    if (description) await this.browser.fillInput('[data-testid=\"recipe-description\"]', description);\n    if (category) await this.browser.fillInput('[data-testid=\"recipe-category\"]', category);\n    if (cuisine) await this.browser.fillInput('[data-testid=\"recipe-cuisine\"]', cuisine);\n    if (prepTime) await this.browser.fillInput('[data-testid=\"prep-time\"]', prepTime.toString());\n    if (cookTime) await this.browser.fillInput('[data-testid=\"cook-time\"]', cookTime.toString());\n    if (servings) await this.browser.fillInput('[data-testid=\"servings\"]', servings.toString());\n    if (imageUrl) await this.browser.fillInput('[data-testid=\"image-url\"]', imageUrl);\n\n    // Add ingredients\n    for (let i = 0; i < ingredients.length; i++) {\n      if (i > 0) {\n        // Add new ingredient row if needed\n        await this.browser.clickElement('[data-testid=\"add-ingredient\"]');\n      }\n      await this.browser.fillInput(`[data-testid=\"ingredient-${i}\"]`, ingredients[i]);\n    }\n\n    // Add instructions\n    for (let i = 0; i < instructions.length; i++) {\n      if (i > 0) {\n        // Add new instruction row if needed\n        await this.browser.clickElement('[data-testid=\"add-instruction\"]');\n      }\n      await this.browser.fillInput(`[data-testid=\"instruction-${i}\"]`, instructions[i]);\n    }\n\n    // Fill nutrition information\n    if (calories) await this.browser.fillInput('[data-testid=\"calories\"]', calories.toString());\n    if (protein) await this.browser.fillInput('[data-testid=\"protein\"]', protein.toString());\n    if (carbs) await this.browser.fillInput('[data-testid=\"carbs\"]', carbs.toString());\n    if (fat) await this.browser.fillInput('[data-testid=\"fat\"]', fat.toString());\n\n    // Add tags\n    for (const tag of tags) {\n      await this.browser.fillInput('[data-testid=\"tag-input\"]', tag);\n      await this.page.keyboard.press('Enter');\n    }\n\n    // Save recipe\n    const savePromise = waitForSave ? this.browser.waitForNavigation() : Promise.resolve();\n    await Promise.all([\n      savePromise,\n      this.browser.clickElement('[data-testid=\"save-recipe\"]')\n    ]);\n\n    // Get the recipe ID from URL if redirected to recipe detail\n    const currentUrl = this.browser.getCurrentUrl();\n    const recipeMatch = currentUrl.match(/\\/recipes\\/(\\w+)/);\n    \n    return {\n      success: true,\n      recipeId: recipeMatch ? recipeMatch[1] : null,\n      url: currentUrl\n    };\n  }\n\n  /**\n   * Generate recipe using AI\n   */\n  async generateRecipeWithAI(prompt, options = {}) {\n    const { waitForGeneration = true, modifyPrompt = null } = options;\n\n    // Navigate to AI generation page\n    await this.goToGenerateRecipe();\n\n    // Enter the recipe prompt\n    await this.browser.fillInput('[data-testid=\"recipe-prompt\"]', prompt);\n\n    // Click generate button\n    const generatePromise = waitForGeneration ? \n      this.browser.waitForElement('[data-testid=\"generated-recipe\"]', 30000) : \n      Promise.resolve();\n    \n    await Promise.all([\n      generatePromise,\n      this.browser.clickElement('[data-testid=\"generate-button\"]')\n    ]);\n\n    if (waitForGeneration) {\n      // Wait for generation to complete\n      await this.page.waitForFunction(() => {\n        const spinner = document.querySelector('[data-testid=\"generation-spinner\"]');\n        return !spinner || spinner.style.display === 'none';\n      }, { timeout: 30000 });\n\n      // If there's a modify prompt, use it\n      if (modifyPrompt) {\n        await this.modifyGeneratedRecipe(modifyPrompt);\n      }\n\n      return this.getGeneratedRecipeData();\n    }\n\n    return { success: true };\n  }\n\n  /**\n   * Modify generated recipe with additional prompt\n   */\n  async modifyGeneratedRecipe(modifyPrompt) {\n    await this.browser.fillInput('[data-testid=\"modify-prompt\"]', modifyPrompt);\n    \n    await Promise.all([\n      this.browser.waitForElement('[data-testid=\"generated-recipe\"]', 30000),\n      this.browser.clickElement('[data-testid=\"modify-button\"]')\n    ]);\n\n    // Wait for modification to complete\n    await this.page.waitForFunction(() => {\n      const spinner = document.querySelector('[data-testid=\"modification-spinner\"]');\n      return !spinner || spinner.style.display === 'none';\n    }, { timeout: 30000 });\n  }\n\n  /**\n   * Get generated recipe data\n   */\n  async getGeneratedRecipeData() {\n    await this.browser.waitForElement('[data-testid=\"generated-recipe\"]');\n    \n    return this.page.evaluate(() => {\n      return {\n        title: document.querySelector('[data-testid=\"generated-title\"]')?.textContent?.trim(),\n        description: document.querySelector('[data-testid=\"generated-description\"]')?.textContent?.trim(),\n        ingredients: Array.from(document.querySelectorAll('[data-testid^=\"generated-ingredient-\"]')).map(el => el.textContent.trim()),\n        instructions: Array.from(document.querySelectorAll('[data-testid^=\"generated-instruction-\"]')).map(el => el.textContent.trim()),\n        nutrition: {\n          calories: document.querySelector('[data-testid=\"generated-calories\"]')?.textContent?.trim(),\n          protein: document.querySelector('[data-testid=\"generated-protein\"]')?.textContent?.trim(),\n          carbs: document.querySelector('[data-testid=\"generated-carbs\"]')?.textContent?.trim(),\n          fat: document.querySelector('[data-testid=\"generated-fat\"]')?.textContent?.trim()\n        }\n      };\n    });\n  }\n\n  /**\n   * Save generated recipe\n   */\n  async saveGeneratedRecipe() {\n    await Promise.all([\n      this.browser.waitForNavigation(),\n      this.browser.clickElement('[data-testid=\"save-generated-recipe\"]')\n    ]);\n\n    // Get the recipe ID from URL if redirected to recipe detail\n    const currentUrl = this.browser.getCurrentUrl();\n    const recipeMatch = currentUrl.match(/\\/recipes\\/(\\w+)/);\n    \n    return {\n      success: true,\n      recipeId: recipeMatch ? recipeMatch[1] : null,\n      url: currentUrl\n    };\n  }\n\n  /**\n   * Edit existing recipe\n   */\n  async editRecipe(recipeId, updates) {\n    await this.browser.navigate(`/recipes/${recipeId}/edit`);\n    await this.browser.waitForElement('[data-testid=\"recipe-form\"]');\n\n    // Apply updates to the form\n    for (const [field, value] of Object.entries(updates)) {\n      const selector = `[data-testid=\"recipe-${field}\"]`;\n      if (await this.browser.elementExists(selector)) {\n        await this.browser.fillInput(selector, value.toString());\n      }\n    }\n\n    // Save changes\n    await Promise.all([\n      this.browser.waitForNavigation(),\n      this.browser.clickElement('[data-testid=\"save-recipe\"]')\n    ]);\n\n    return { success: true };\n  }\n\n  /**\n   * Delete recipe\n   */\n  async deleteRecipe(recipeId) {\n    await this.viewRecipeDetails(recipeId);\n    \n    // Click delete button\n    await this.browser.clickElement('[data-testid=\"delete-recipe\"]');\n    \n    // Confirm deletion if confirmation dialog appears\n    if (await this.browser.elementExists('[data-testid=\"confirm-delete\"]', 2000)) {\n      await this.browser.clickElement('[data-testid=\"confirm-delete\"]');\n    }\n    \n    // Wait for redirect after deletion\n    await this.browser.waitForNavigation();\n    \n    return { success: true };\n  }\n\n  /**\n   * Navigate to user's favorites\n   */\n  async goToFavorites() {\n    await this.browser.navigate('/favorites');\n    await this.browser.waitForElement('[data-testid=\"favorites-list\"]');\n  }\n\n  /**\n   * Get user's favorite recipes\n   */\n  async getFavoriteRecipes() {\n    await this.goToFavorites();\n    return this.getRecipeResults();\n  }\n}\n\nmodule.exports = RecipeHelper;