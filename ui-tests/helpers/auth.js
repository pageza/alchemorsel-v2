/**\n * Authentication helper utilities for E2E tests\n */\nclass AuthHelper {\n  constructor(browserManager) {\n    this.browser = browserManager;\n    this.page = browserManager.getPage();\n  }\n\n  /**\n   * Navigate to login page\n   */\n  async goToLogin() {\n    await this.browser.navigate('/login');\n    await this.browser.waitForElement('[data-testid=\"login-form\"]');\n  }\n\n  /**\n   * Navigate to register page\n   */\n  async goToRegister() {\n    await this.browser.navigate('/register');\n    await this.browser.waitForElement('[data-testid=\"register-form\"]');\n  }\n\n  /**\n   * Perform login with credentials\n   */\n  async login(email, password, options = {}) {\n    const {\n      rememberMe = false,\n      expectSuccess = true,\n      waitForRedirect = true\n    } = options;\n\n    // Navigate to login page if not already there\n    if (!this.browser.getCurrentUrl().includes('/login')) {\n      await this.goToLogin();\n    }\n\n    // Fill login form\n    await this.browser.fillInput('[data-testid=\"email-input\"]', email);\n    await this.browser.fillInput('[data-testid=\"password-input\"]', password);\n\n    // Handle remember me checkbox\n    if (rememberMe) {\n      const rememberCheckbox = await this.browser.waitForElement('[data-testid=\"remember-me\"]');\n      const isChecked = await this.page.evaluate(el => el.checked, rememberCheckbox);\n      if (!isChecked) {\n        await this.browser.clickElement('[data-testid=\"remember-me\"]');\n      }\n    }\n\n    // Submit form\n    const submitButton = await this.browser.waitForElement('[data-testid=\"login-submit\"]');\n    await Promise.all([\n      waitForRedirect ? this.browser.waitForNavigation() : Promise.resolve(),\n      this.browser.clickElement('[data-testid=\"login-submit\"]')\n    ]);\n\n    if (expectSuccess) {\n      // Wait for successful login indicators\n      await this.waitForLoginSuccess();\n    }\n\n    return this.isLoggedIn();\n  }\n\n  /**\n   * Perform user registration\n   */\n  async register(userData, options = {}) {\n    const {\n      expectSuccess = true,\n      waitForRedirect = true\n    } = options;\n\n    const {\n      email,\n      password,\n      confirmPassword = password,\n      username,\n      firstName,\n      lastName,\n      dietaryPreferences = [],\n      allergies = []\n    } = userData;\n\n    // Navigate to register page if not already there\n    if (!this.browser.getCurrentUrl().includes('/register')) {\n      await this.goToRegister();\n    }\n\n    // Fill basic registration form\n    await this.browser.fillInput('[data-testid=\"email-input\"]', email);\n    await this.browser.fillInput('[data-testid=\"username-input\"]', username);\n    await this.browser.fillInput('[data-testid=\"password-input\"]', password);\n    await this.browser.fillInput('[data-testid=\"confirm-password-input\"]', confirmPassword);\n\n    // Fill optional fields if present\n    if (firstName && await this.browser.elementExists('[data-testid=\"first-name-input\"]')) {\n      await this.browser.fillInput('[data-testid=\"first-name-input\"]', firstName);\n    }\n    if (lastName && await this.browser.elementExists('[data-testid=\"last-name-input\"]')) {\n      await this.browser.fillInput('[data-testid=\"last-name-input\"]', lastName);\n    }\n\n    // Handle dietary preferences\n    for (const preference of dietaryPreferences) {\n      const selector = `[data-testid=\"dietary-${preference}\"]`;\n      if (await this.browser.elementExists(selector)) {\n        await this.browser.clickElement(selector);\n      }\n    }\n\n    // Handle allergies\n    for (const allergy of allergies) {\n      const selector = `[data-testid=\"allergy-${allergy}\"]`;\n      if (await this.browser.elementExists(selector)) {\n        await this.browser.clickElement(selector);\n      }\n    }\n\n    // Submit registration form\n    const submitButton = await this.browser.waitForElement('[data-testid=\"register-submit\"]');\n    await Promise.all([\n      waitForRedirect ? this.browser.waitForNavigation() : Promise.resolve(),\n      this.browser.clickElement('[data-testid=\"register-submit\"]')\n    ]);\n\n    if (expectSuccess) {\n      // Wait for successful registration indicators\n      await this.waitForRegistrationSuccess();\n    }\n\n    return this.isLoggedIn();\n  }\n\n  /**\n   * Perform logout\n   */\n  async logout() {\n    // Check if user is logged in\n    if (!(await this.isLoggedIn())) {\n      return true;\n    }\n\n    // Find and click logout button (could be in dropdown or direct button)\n    if (await this.browser.elementExists('[data-testid=\"user-menu\"]')) {\n      // If there's a user menu, click it first\n      await this.browser.clickElement('[data-testid=\"user-menu\"]');\n      await this.browser.waitForElement('[data-testid=\"logout-button\"]');\n    }\n\n    await Promise.all([\n      this.browser.waitForNavigation(),\n      this.browser.clickElement('[data-testid=\"logout-button\"]')\n    ]);\n\n    // Verify logout was successful\n    await this.waitForLogoutSuccess();\n    return !(await this.isLoggedIn());\n  }\n\n  /**\n   * Check if user is currently logged in\n   */\n  async isLoggedIn() {\n    try {\n      // Look for authenticated user indicators\n      const indicators = [\n        '[data-testid=\"user-menu\"]',\n        '[data-testid=\"user-avatar\"]',\n        '[data-testid=\"dashboard-link\"]',\n        '.authenticated-layout'\n      ];\n\n      for (const selector of indicators) {\n        if (await this.browser.elementExists(selector, 2000)) {\n          return true;\n        }\n      }\n\n      // Check for authentication token in localStorage\n      const token = await this.page.evaluate(() => {\n        return localStorage.getItem('auth-token') || localStorage.getItem('token');\n      });\n\n      return !!token;\n    } catch (error) {\n      console.warn('Error checking login status:', error.message);\n      return false;\n    }\n  }\n\n  /**\n   * Get current user information\n   */\n  async getCurrentUser() {\n    if (!(await this.isLoggedIn())) {\n      return null;\n    }\n\n    try {\n      // Try to get user info from the page\n      const userInfo = await this.page.evaluate(() => {\n        // Try to get from Pinia store\n        if (window.__PINIA__ && window.__PINIA__.state.value.auth) {\n          return window.__PINIA__.state.value.auth.user;\n        }\n        \n        // Try to get from localStorage\n        const userStr = localStorage.getItem('user') || localStorage.getItem('auth-user');\n        return userStr ? JSON.parse(userStr) : null;\n      });\n\n      return userInfo;\n    } catch (error) {\n      console.warn('Error getting current user:', error.message);\n      return null;\n    }\n  }\n\n  /**\n   * Wait for login success indicators\n   */\n  async waitForLoginSuccess() {\n    // Wait for either dashboard or redirect\n    const indicators = [\n      '[data-testid=\"dashboard\"]',\n      '[data-testid=\"user-menu\"]',\n      '.authenticated-layout'\n    ];\n\n    for (const selector of indicators) {\n      try {\n        await this.browser.waitForElement(selector, 5000);\n        return;\n      } catch {\n        // Continue to next indicator\n      }\n    }\n\n    // Fallback: check if we're no longer on login page\n    if (!this.browser.getCurrentUrl().includes('/login')) {\n      return;\n    }\n\n    throw new Error('Login success indicators not found');\n  }\n\n  /**\n   * Wait for registration success indicators\n   */\n  async waitForRegistrationSuccess() {\n    // Similar to login success\n    await this.waitForLoginSuccess();\n  }\n\n  /**\n   * Wait for logout success indicators\n   */\n  async waitForLogoutSuccess() {\n    // Wait for login page or landing page\n    const successIndicators = [\n      '[data-testid=\"login-form\"]',\n      '[data-testid=\"landing-hero\"]',\n      '[data-testid=\"guest-navigation\"]'\n    ];\n\n    for (const selector of successIndicators) {\n      try {\n        await this.browser.waitForElement(selector, 5000);\n        return;\n      } catch {\n        // Continue to next indicator\n      }\n    }\n\n    // Check if we're on a public page\n    const url = this.browser.getCurrentUrl();\n    if (url.includes('/login') || url === '/' || url.includes('/recipes')) {\n      return;\n    }\n\n    throw new Error('Logout success indicators not found');\n  }\n\n  /**\n   * Clear authentication state\n   */\n  async clearAuthState() {\n    await this.page.evaluate(() => {\n      localStorage.clear();\n      sessionStorage.clear();\n    });\n  }\n\n  /**\n   * Set authentication token directly\n   */\n  async setAuthToken(token) {\n    await this.page.evaluate((token) => {\n      localStorage.setItem('auth-token', token);\n    }, token);\n  }\n\n  /**\n   * Get authentication token\n   */\n  async getAuthToken() {\n    return this.page.evaluate(() => {\n      return localStorage.getItem('auth-token') || localStorage.getItem('token');\n    });\n  }\n\n  /**\n   * Login with test user credentials\n   */\n  async loginAsTestUser() {\n    const email = process.env.TEST_USER_EMAIL || 'test@alchemorsel.com';\n    const password = process.env.TEST_USER_PASSWORD || 'TestPassword123!';\n    \n    return this.login(email, password);\n  }\n\n  /**\n   * Create and login as a new test user\n   */\n  async createAndLoginTestUser(userOverrides = {}) {\n    const timestamp = Date.now();\n    const defaultUser = {\n      email: `test${timestamp}@alchemorsel.com`,\n      username: `testuser${timestamp}`,\n      password: 'TestPassword123!',\n      firstName: 'Test',\n      lastName: 'User',\n      dietaryPreferences: ['vegetarian'],\n      allergies: ['nuts']\n    };\n\n    const userData = { ...defaultUser, ...userOverrides };\n    \n    await this.register(userData);\n    return userData;\n  }\n}\n\nmodule.exports = AuthHelper;