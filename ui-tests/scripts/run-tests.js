#!/usr/bin/env node\n\nconst { spawn } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\nrequire('dotenv').config();\n\n/**\n * Test runner script with enhanced reporting and CI integration\n */\nclass TestRunner {\n  constructor() {\n    this.testResults = {\n      total: 0,\n      passed: 0,\n      failed: 0,\n      skipped: 0,\n      duration: 0,\n      failures: []\n    };\n    \n    this.startTime = Date.now();\n    this.reportDir = path.join(__dirname, '../reports');\n    this.screenshotDir = path.join(__dirname, '../screenshots');\n    \n    // Ensure report directories exist\n    if (!fs.existsSync(this.reportDir)) {\n      fs.mkdirSync(this.reportDir, { recursive: true });\n    }\n    if (!fs.existsSync(this.screenshotDir)) {\n      fs.mkdirSync(this.screenshotDir, { recursive: true });\n    }\n  }\n\n  /**\n   * Parse command line arguments\n   */\n  parseArgs() {\n    const args = process.argv.slice(2);\n    const config = {\n      testPattern: null,\n      headless: process.env.HEADLESS !== 'false',\n      verbose: false,\n      watch: false,\n      coverage: false,\n      parallel: false,\n      retries: parseInt(process.env.TEST_RETRIES) || 2\n    };\n\n    for (let i = 0; i < args.length; i++) {\n      const arg = args[i];\n      \n      switch (arg) {\n        case '--test':\n        case '-t':\n          config.testPattern = args[++i];\n          break;\n        case '--headless':\n          config.headless = true;\n          break;\n        case '--headed':\n          config.headless = false;\n          break;\n        case '--verbose':\n        case '-v':\n          config.verbose = true;\n          break;\n        case '--watch':\n        case '-w':\n          config.watch = true;\n          break;\n        case '--coverage':\n        case '-c':\n          config.coverage = true;\n          break;\n        case '--parallel':\n        case '-p':\n          config.parallel = true;\n          break;\n        case '--retries':\n          config.retries = parseInt(args[++i]) || 2;\n          break;\n        case '--help':\n        case '-h':\n          this.showHelp();\n          process.exit(0);\n      }\n    }\n\n    return config;\n  }\n\n  /**\n   * Show help information\n   */\n  showHelp() {\n    console.log(`\nAlchemorsel E2E Test Runner\n\nUsage: npm run test [options]\n\nOptions:\n  -t, --test <pattern>     Run tests matching pattern\n  --headless               Run in headless mode (default)\n  --headed                 Run with browser UI\n  -v, --verbose            Verbose output\n  -w, --watch              Watch mode\n  -c, --coverage           Generate coverage report\n  -p, --parallel           Run tests in parallel\n  --retries <number>       Number of retries for failed tests\n  -h, --help               Show this help\n\nExamples:\n  npm run test                           # Run all tests\n  npm run test -- --test auth            # Run auth tests only\n  npm run test -- --headed --verbose     # Run with browser UI and verbose output\n  npm run test -- --watch               # Run in watch mode\n`);\n  }\n\n  /**\n   * Get test files based on pattern\n   */\n  getTestFiles(pattern) {\n    const testDir = path.join(__dirname, '../tests');\n    const allTestFiles = [];\n\n    function findTestFiles(dir) {\n      const files = fs.readdirSync(dir);\n      for (const file of files) {\n        const filePath = path.join(dir, file);\n        const stat = fs.statSync(filePath);\n        \n        if (stat.isDirectory()) {\n          findTestFiles(filePath);\n        } else if (file.endsWith('.test.js')) {\n          allTestFiles.push(filePath);\n        }\n      }\n    }\n\n    findTestFiles(testDir);\n\n    if (pattern) {\n      return allTestFiles.filter(file => \n        file.toLowerCase().includes(pattern.toLowerCase())\n      );\n    }\n\n    return allTestFiles;\n  }\n\n  /**\n   * Set environment variables for tests\n   */\n  setTestEnvironment(config) {\n    process.env.HEADLESS = config.headless.toString();\n    process.env.VERBOSE_LOGGING = config.verbose.toString();\n    process.env.TEST_RETRIES = config.retries.toString();\n    \n    if (config.verbose) {\n      process.env.DEBUG_MODE = 'true';\n    }\n  }\n\n  /**\n   * Run a single test file\n   */\n  async runTestFile(testFile, config) {\n    return new Promise((resolve) => {\n      console.log(`\\nüß™ Running: ${path.relative(process.cwd(), testFile)}`);\n      \n      const testProcess = spawn('node', ['--test', testFile], {\n        stdio: 'pipe',\n        env: { ...process.env }\n      });\n\n      let output = '';\n      let errorOutput = '';\n\n      testProcess.stdout.on('data', (data) => {\n        const text = data.toString();\n        output += text;\n        if (config.verbose) {\n          process.stdout.write(text);\n        }\n      });\n\n      testProcess.stderr.on('data', (data) => {\n        const text = data.toString();\n        errorOutput += text;\n        if (config.verbose) {\n          process.stderr.write(text);\n        }\n      });\n\n      testProcess.on('close', (code) => {\n        const result = this.parseTestOutput(output, errorOutput, testFile);\n        result.exitCode = code;\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Parse test output to extract results\n   */\n  parseTestOutput(output, errorOutput, testFile) {\n    const result = {\n      file: path.relative(process.cwd(), testFile),\n      passed: 0,\n      failed: 0,\n      skipped: 0,\n      duration: 0,\n      failures: [],\n      output: output,\n      errorOutput: errorOutput\n    };\n\n    // Parse test results from Node.js test runner output\n    const lines = output.split('\\n');\n    \n    for (const line of lines) {\n      if (line.includes('‚úì')) {\n        result.passed++;\n      } else if (line.includes('‚úó') || line.includes('not ok')) {\n        result.failed++;\n        result.failures.push(line.trim());\n      } else if (line.includes('# Subtest:')) {\n        // Count total tests\n      }\n    }\n\n    // Extract duration if available\n    const durationMatch = output.match(/(\\d+)ms/);\n    if (durationMatch) {\n      result.duration = parseInt(durationMatch[1]);\n    }\n\n    return result;\n  }\n\n  /**\n   * Run all tests\n   */\n  async runTests(config) {\n    console.log('üöÄ Starting Alchemorsel E2E Tests\\n');\n    console.log(`Configuration:`);\n    console.log(`  Headless: ${config.headless}`);\n    console.log(`  Verbose: ${config.verbose}`);\n    console.log(`  Retries: ${config.retries}`);\n    if (config.testPattern) {\n      console.log(`  Pattern: ${config.testPattern}`);\n    }\n    console.log('');\n\n    this.setTestEnvironment(config);\n    \n    const testFiles = this.getTestFiles(config.testPattern);\n    \n    if (testFiles.length === 0) {\n      console.log('‚ùå No test files found');\n      process.exit(1);\n    }\n\n    console.log(`Found ${testFiles.length} test file(s)\\n`);\n\n    const results = [];\n    \n    for (const testFile of testFiles) {\n      let attempts = 0;\n      let result = null;\n      \n      while (attempts <= config.retries) {\n        result = await this.runTestFile(testFile, config);\n        \n        if (result.exitCode === 0 || attempts === config.retries) {\n          break;\n        }\n        \n        attempts++;\n        console.log(`  üìù Retry ${attempts}/${config.retries} for ${result.file}`);\n      }\n      \n      results.push(result);\n      \n      // Update overall results\n      this.testResults.total += result.passed + result.failed + result.skipped;\n      this.testResults.passed += result.passed;\n      this.testResults.failed += result.failed;\n      this.testResults.skipped += result.skipped;\n      this.testResults.duration += result.duration;\n      this.testResults.failures.push(...result.failures);\n      \n      // Print immediate result\n      if (result.exitCode === 0) {\n        console.log(`  ‚úÖ ${result.file} - ${result.passed} passed`);\n      } else {\n        console.log(`  ‚ùå ${result.file} - ${result.failed} failed, ${result.passed} passed`);\n      }\n    }\n\n    this.testResults.duration = Date.now() - this.startTime;\n    \n    // Generate reports\n    await this.generateReports(results, config);\n    \n    // Print summary\n    this.printSummary();\n    \n    // Exit with appropriate code\n    process.exit(this.testResults.failed > 0 ? 1 : 0);\n  }\n\n  /**\n   * Generate test reports\n   */\n  async generateReports(results, config) {\n    // Generate JSON report\n    const jsonReport = {\n      summary: this.testResults,\n      results: results,\n      config: config,\n      timestamp: new Date().toISOString(),\n      environment: {\n        baseUrl: process.env.BASE_URL,\n        nodeVersion: process.version,\n        platform: process.platform\n      }\n    };\n\n    const jsonReportPath = path.join(this.reportDir, 'test-results.json');\n    fs.writeFileSync(jsonReportPath, JSON.stringify(jsonReport, null, 2));\n\n    // Generate HTML report\n    await this.generateHtmlReport(jsonReport);\n    \n    // Generate JUnit XML for CI\n    await this.generateJunitReport(results);\n    \n    console.log(`\\nüìä Reports generated:`);\n    console.log(`  JSON: ${jsonReportPath}`);\n    console.log(`  HTML: ${path.join(this.reportDir, 'test-report.html')}`);\n    console.log(`  JUnit: ${path.join(this.reportDir, 'junit.xml')}`);\n  }\n\n  /**\n   * Generate HTML report\n   */\n  async generateHtmlReport(jsonReport) {\n    const htmlContent = `\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Alchemorsel E2E Test Report</title>\n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        .header { background: #f5f5f5; padding: 20px; border-radius: 5px; }\n        .summary { display: flex; gap: 20px; margin: 20px 0; }\n        .stat { background: #e8f4f8; padding: 15px; border-radius: 5px; text-align: center; }\n        .stat.passed { background: #d4edda; }\n        .stat.failed { background: #f8d7da; }\n        .test-file { border: 1px solid #ddd; margin: 10px 0; border-radius: 5px; }\n        .test-header { background: #f8f9fa; padding: 10px; font-weight: bold; }\n        .test-header.passed { background: #d4edda; }\n        .test-header.failed { background: #f8d7da; }\n        .test-details { padding: 10px; }\n        .failure { background: #fff3cd; padding: 10px; margin: 5px 0; border-radius: 3px; }\n        .timestamp { color: #666; font-size: 0.9em; }\n    </style>\n</head>\n<body>\n    <div class=\"header\">\n        <h1>üß™ Alchemorsel E2E Test Report</h1>\n        <p class=\"timestamp\">Generated: ${jsonReport.timestamp}</p>\n        <p>Base URL: ${jsonReport.environment.baseUrl}</p>\n        <p>Duration: ${Math.round(jsonReport.summary.duration / 1000)}s</p>\n    </div>\n    \n    <div class=\"summary\">\n        <div class=\"stat\">\n            <h3>${jsonReport.summary.total}</h3>\n            <p>Total Tests</p>\n        </div>\n        <div class=\"stat passed\">\n            <h3>${jsonReport.summary.passed}</h3>\n            <p>Passed</p>\n        </div>\n        <div class=\"stat failed\">\n            <h3>${jsonReport.summary.failed}</h3>\n            <p>Failed</p>\n        </div>\n        <div class=\"stat\">\n            <h3>${jsonReport.summary.skipped}</h3>\n            <p>Skipped</p>\n        </div>\n    </div>\n    \n    <h2>Test Results</h2>\n    ${jsonReport.results.map(result => `\n        <div class=\"test-file\">\n            <div class=\"test-header ${result.exitCode === 0 ? 'passed' : 'failed'}\">\n                ${result.exitCode === 0 ? '‚úÖ' : '‚ùå'} ${result.file}\n                <span style=\"float: right;\">${result.passed} passed, ${result.failed} failed</span>\n            </div>\n            ${result.failures.length > 0 ? `\n                <div class=\"test-details\">\n                    <h4>Failures:</h4>\n                    ${result.failures.map(failure => `\n                        <div class=\"failure\">${failure}</div>\n                    `).join('')}\n                </div>\n            ` : ''}\n        </div>\n    `).join('')}\n</body>\n</html>`;\n\n    const htmlReportPath = path.join(this.reportDir, 'test-report.html');\n    fs.writeFileSync(htmlReportPath, htmlContent);\n  }\n\n  /**\n   * Generate JUnit XML report for CI systems\n   */\n  async generateJunitReport(results) {\n    const testsuites = results.map(result => {\n      const testsuite = `\n    <testsuite name=\"${result.file}\" tests=\"${result.passed + result.failed}\" failures=\"${result.failed}\" time=\"${result.duration / 1000}\">\n      ${result.failures.map(failure => `\n        <testcase name=\"${failure.split(' ')[0]}\" classname=\"${result.file}\">\n          <failure message=\"${failure}\">${failure}</failure>\n        </testcase>\n      `).join('')}\n      ${Array(result.passed).fill(0).map((_, i) => `\n        <testcase name=\"test-${i}\" classname=\"${result.file}\"/>\n      `).join('')}\n    </testsuite>`;\n      \n      return testsuite;\n    }).join('');\n\n    const junitXml = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<testsuites name=\"Alchemorsel E2E Tests\" tests=\"${this.testResults.total}\" failures=\"${this.testResults.failed}\" time=\"${this.testResults.duration / 1000}\">\n${testsuites}\n</testsuites>`;\n\n    const junitPath = path.join(this.reportDir, 'junit.xml');\n    fs.writeFileSync(junitPath, junitXml);\n  }\n\n  /**\n   * Print test summary\n   */\n  printSummary() {\n    console.log('\\n' + '='.repeat(50));\n    console.log('üìã TEST SUMMARY');\n    console.log('='.repeat(50));\n    console.log(`Total Tests: ${this.testResults.total}`);\n    console.log(`‚úÖ Passed: ${this.testResults.passed}`);\n    console.log(`‚ùå Failed: ${this.testResults.failed}`);\n    console.log(`‚è≠Ô∏è  Skipped: ${this.testResults.skipped}`);\n    console.log(`‚è±Ô∏è  Duration: ${Math.round(this.testResults.duration / 1000)}s`);\n    \n    if (this.testResults.failed > 0) {\n      console.log('\\n‚ùå FAILED TESTS:');\n      this.testResults.failures.forEach(failure => {\n        console.log(`  ‚Ä¢ ${failure}`);\n      });\n    }\n    \n    console.log('\\n' + (this.testResults.failed === 0 ? 'üéâ ALL TESTS PASSED!' : 'üí• SOME TESTS FAILED'));\n    console.log('='.repeat(50));\n  }\n}\n\n// Run the tests\nif (require.main === module) {\n  const runner = new TestRunner();\n  const config = runner.parseArgs();\n  runner.runTests(config).catch(error => {\n    console.error('Test runner error:', error);\n    process.exit(1);\n  });\n}\n\nmodule.exports = TestRunner;