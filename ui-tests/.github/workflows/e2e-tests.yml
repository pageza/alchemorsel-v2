name: E2E Tests\n\non:\n  push:\n    branches: [ main, master, develop ]\n  pull_request:\n    branches: [ main, master, develop ]\n  schedule:\n    # Run tests daily at 2 AM UTC\n    - cron: '0 2 * * *'\n  workflow_dispatch:\n    inputs:\n      test_pattern:\n        description: 'Test pattern to run (optional)'\n        required: false\n        type: string\n      headless:\n        description: 'Run in headless mode'\n        required: false\n        type: boolean\n        default: true\n\njobs:\n  e2e-tests:\n    runs-on: ubuntu-latest\n    \n    strategy:\n      matrix:\n        node-version: [18.x, 20.x]\n        test-suite:\n          - auth\n          - recipes\n          - profile\n          - integration\n    \n    services:\n      postgres:\n        image: pgvector/pgvector:pg16\n        env:\n          POSTGRES_USER: postgres\n          POSTGRES_PASSWORD: postgres\n          POSTGRES_DB: alchemorsel_test\n        options: >\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 5432:5432\n      \n      redis:\n        image: redis:7-alpine\n        options: >\n          --health-cmd \"redis-cli ping\"\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n        ports:\n          - 6379:6379\n    \n    steps:\n    - name: Checkout code\n      uses: actions/checkout@v4\n      with:\n        submodules: recursive\n    \n    - name: Use Node.js ${{ matrix.node-version }}\n      uses: actions/setup-node@v4\n      with:\n        node-version: ${{ matrix.node-version }}\n        cache: 'npm'\n        cache-dependency-path: |\n          frontend/package-lock.json\n          ui-tests/package-lock.json\n    \n    - name: Set up Go\n      uses: actions/setup-go@v4\n      with:\n        go-version: '1.23'\n        cache-dependency-path: backend/go.sum\n    \n    - name: Install backend dependencies\n      working-directory: ./backend\n      run: go mod download\n    \n    - name: Install frontend dependencies\n      working-directory: ./frontend\n      run: npm ci\n    \n    - name: Install E2E test dependencies\n      working-directory: ./ui-tests\n      run: npm ci\n    \n    - name: Setup test environment\n      run: |\n        # Copy environment files\n        cp ui-tests/.env.example ui-tests/.env\n        \n        # Set test-specific environment variables\n        echo \"BASE_URL=http://localhost:5173\" >> ui-tests/.env\n        echo \"API_BASE_URL=http://localhost:8080\" >> ui-tests/.env\n        echo \"HEADLESS=true\" >> ui-tests/.env\n        echo \"SCREENSHOT_ON_FAILURE=true\" >> ui-tests/.env\n        echo \"TEST_RETRIES=2\" >> ui-tests/.env\n        \n        # Create test data directories\n        mkdir -p ui-tests/screenshots\n        mkdir -p ui-tests/reports\n        mkdir -p ui-tests/videos\n    \n    - name: Build frontend\n      working-directory: ./frontend\n      run: npm run build\n    \n    - name: Start backend server\n      working-directory: ./backend\n      env:\n        DB_HOST: localhost\n        DB_PORT: 5432\n        DB_USER: postgres\n        DB_PASSWORD: postgres\n        DB_NAME: alchemorsel_test\n        DB_SSL_MODE: disable\n        REDIS_HOST: localhost\n        REDIS_PORT: 6379\n        JWT_SECRET: test-jwt-secret-for-ci\n        SERVER_PORT: 8080\n        SERVER_HOST: localhost\n        DEEPSEEK_API_KEY: ${{ secrets.DEEPSEEK_API_KEY }}\n      run: |\n        # Run database migrations\n        go run ./cmd/migrate\n        \n        # Start server in background\n        go run ./cmd/api &\n        \n        # Wait for server to be ready\n        timeout 30 bash -c 'until curl -f http://localhost:8080/health; do sleep 1; done' || exit 1\n    \n    - name: Start frontend server\n      working-directory: ./frontend\n      run: |\n        # Start frontend dev server in background\n        npm run dev &\n        \n        # Wait for frontend to be ready\n        timeout 30 bash -c 'until curl -f http://localhost:5173; do sleep 1; done' || exit 1\n    \n    - name: Run E2E tests\n      working-directory: ./ui-tests\n      env:\n        TEST_USER_EMAIL: test@alchemorsel.com\n        TEST_USER_PASSWORD: TestPassword123!\n        HEADLESS: ${{ inputs.headless || true }}\n      run: |\n        # Run tests for specific suite\n        node scripts/run-tests.js --test ${{ matrix.test-suite }} --verbose\n    \n    - name: Upload test reports\n      uses: actions/upload-artifact@v4\n      if: always()\n      with:\n        name: e2e-reports-${{ matrix.node-version }}-${{ matrix.test-suite }}\n        path: |\n          ui-tests/reports/\n          ui-tests/screenshots/\n        retention-days: 30\n    \n    - name: Upload test videos\n      uses: actions/upload-artifact@v4\n      if: failure()\n      with:\n        name: e2e-videos-${{ matrix.node-version }}-${{ matrix.test-suite }}\n        path: ui-tests/videos/\n        retention-days: 7\n    \n    - name: Publish test results\n      uses: dorny/test-reporter@v1\n      if: always()\n      with:\n        name: E2E Tests (${{ matrix.node-version }}, ${{ matrix.test-suite }})\n        path: ui-tests/reports/junit.xml\n        reporter: java-junit\n        fail-on-error: true\n    \n    - name: Comment PR with test results\n      uses: actions/github-script@v7\n      if: github.event_name == 'pull_request' && always()\n      with:\n        script: |\n          const fs = require('fs');\n          const path = './ui-tests/reports/test-results.json';\n          \n          if (fs.existsSync(path)) {\n            const results = JSON.parse(fs.readFileSync(path, 'utf8'));\n            \n            const body = `\n          ## 🧪 E2E Test Results (Node ${{ matrix.node-version }}, ${{ matrix.test-suite }})\n          \n          - **Total Tests:** ${results.summary.total}\n          - **✅ Passed:** ${results.summary.passed}\n          - **❌ Failed:** ${results.summary.failed}\n          - **⏭️ Skipped:** ${results.summary.skipped}\n          - **⏱️ Duration:** ${Math.round(results.summary.duration / 1000)}s\n          \n          ${results.summary.failed > 0 ? `\n          ### ❌ Failed Tests\n          ${results.summary.failures.slice(0, 5).map(f => `- ${f}`).join('\\n')}\n          ${results.summary.failures.length > 5 ? `\\n... and ${results.summary.failures.length - 5} more` : ''}\n          ` : '🎉 All tests passed!'}\n          `;\n          \n            github.rest.issues.createComment({\n              issue_number: context.issue.number,\n              owner: context.repo.owner,\n              repo: context.repo.repo,\n              body: body\n            });\n          }\n\n  aggregate-results:\n    runs-on: ubuntu-latest\n    needs: e2e-tests\n    if: always()\n    \n    steps:\n    - name: Download all test reports\n      uses: actions/download-artifact@v4\n      with:\n        pattern: e2e-reports-*\n        merge-multiple: true\n        path: ./all-reports\n    \n    - name: Generate combined report\n      run: |\n        echo \"# 🧪 E2E Test Summary\" > test-summary.md\n        echo \"\" >> test-summary.md\n        \n        total_tests=0\n        total_passed=0\n        total_failed=0\n        total_skipped=0\n        \n        for report in ./all-reports/test-results.json; do\n          if [ -f \"$report\" ]; then\n            # Extract metrics (simplified)\n            tests=$(grep '\"total\":' \"$report\" | head -1 | sed 's/.*\"total\": *\\([0-9]*\\).*/\\1/')\n            passed=$(grep '\"passed\":' \"$report\" | head -1 | sed 's/.*\"passed\": *\\([0-9]*\\).*/\\1/')\n            failed=$(grep '\"failed\":' \"$report\" | head -1 | sed 's/.*\"failed\": *\\([0-9]*\\).*/\\1/')\n            skipped=$(grep '\"skipped\":' \"$report\" | head -1 | sed 's/.*\"skipped\": *\\([0-9]*\\).*/\\1/')\n            \n            total_tests=$((total_tests + tests))\n            total_passed=$((total_passed + passed))\n            total_failed=$((total_failed + failed))\n            total_skipped=$((total_skipped + skipped))\n          fi\n        done\n        \n        echo \"| Metric | Count |\" >> test-summary.md\n        echo \"|--------|-------|\" >> test-summary.md\n        echo \"| Total Tests | $total_tests |\" >> test-summary.md\n        echo \"| ✅ Passed | $total_passed |\" >> test-summary.md\n        echo \"| ❌ Failed | $total_failed |\" >> test-summary.md\n        echo \"| ⏭️ Skipped | $total_skipped |\" >> test-summary.md\n        \n        if [ $total_failed -eq 0 ]; then\n          echo \"\" >> test-summary.md\n          echo \"🎉 **All E2E tests passed!**\" >> test-summary.md\n        else\n          echo \"\" >> test-summary.md\n          echo \"❌ **Some E2E tests failed. Please check the individual test reports.**\" >> test-summary.md\n        fi\n        \n        cat test-summary.md\n    \n    - name: Update PR with summary\n      if: github.event_name == 'pull_request'\n      uses: actions/github-script@v7\n      with:\n        script: |\n          const fs = require('fs');\n          const summary = fs.readFileSync('test-summary.md', 'utf8');\n          \n          github.rest.issues.createComment({\n            issue_number: context.issue.number,\n            owner: context.repo.owner,\n            repo: context.repo.repo,\n            body: summary\n          });"